apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-backplane-storage-database-percona-operator
  namespace: argocd
spec:
  generators:
    - list:
        elements:
          - cluster: k0s-cntrl
            url: https://10.1.1.40:443

          - cluster: infra1-dc1
            url: https://172.18.0.1:443

  template:
    metadata:
      name: '{{cluster}}-database-percona-operator-helm'
    spec:
      project: core

      source:
        repoURL: https://percona.github.io/percona-helm-charts/
        chart: pxc-operator
        path: pxc-operator
        targetRevision: 1.10.0
        helm: 
          values: |
            # Default values for pxc-operator.
            # This is a YAML-formatted file.
            # Declare variables to be passed into your templates.

            replicaCount: 1

            operatorImageRepository: percona/percona-xtradb-cluster-operator
            imagePullPolicy: Always
            image: ""

            # set if you want to specify a namespace to watch
            # defaults to `.Release.namespace` if left blank
            # watchNamespace:

            # set if operator should be deployed in cluster wide mode. defaults to false
            watchAllNamespaces: false

            # set if you want to use a different operator name
            # defaults to `percona-xtradb-cluster-operator`
            # operatorName:

            # set to false if you don't want the helm chart to
            # automatically create the CRD.
            createCRD: true

            imagePullSecrets: []
            nameOverride: ""
            fullnameOverride: ""

            resources:
              # We usually recommend not to specify default resources and to leave this as a conscious
              # choice for the user. This also increases chances charts run on environments with little
              # resources, such as Minikube. If you don't want to specify resources, comment the following
              # lines and add the curly braces after 'resources:'.
              limits:
                cpu: 200m
                memory: 500Mi
              requests:
                cpu: 100m
                memory: 20Mi

            nodeSelector: {}

            tolerations: []

            affinity: {}


      destination:
        server: '{{url}}'
        namespace: core-prod
