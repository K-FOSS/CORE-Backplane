# The following example is minimalist. The security policies
# and resource specifications are not meant to be used in production.
# Please refer to the operator documentation for recommendations on
# production settings.
apiVersion: planetscale.com/v2
kind: VitessCluster
metadata:
  name: global
spec:
  globalLockserver:
    external:
      implementation: consul
      address: infra1-dc1-server-0.node.kjdev:8500
      rootPath: vitess/global2/

  images:
    vtctld: vitess/vtctld:v14.0.2-buster
    vtgate: vitess/vtgate:v14.0.2

    vttablet: vitess/vttablet:v14.0.2
    vtadmin: vitess/vtadmin:v14.0.2
    mysqld: 
      mysql80Compatible: vitess/lite:mysql80

  cells:
    - name: zone1
      lockserver:
        external:
          implementation: consul
          address: infra1-dc1-server-0.node.kjdev:8500
          rootPath: vitess/global2/
      gateway:
        replicas: 1
        authentication:
          static:
            secret:
              name: core-cluster-config
              key: users.json
        secureTransport:
          required: false
          tls:
            certSecret:
              name: myloginspace-default-certificates
              key: tls.crt
            keySecret:
              name: myloginspace-default-certificates
              key: tls.key

        # extraFlags:
        #   mysql_auth_server_impl: ldap
        #   mysql_ldap_auth_config_file: /run/secrets/ldapauth/ldapconfig.json
        extraVolumeMounts:
          - name: ldap-config
            mountPath: /run/secrets/ldapauth
            readOnly: true

          - name: ldap-tls
            mountPath: /TLS/LDAP
            readOnly: true
        extraVolumes:
          - name: ldap-config
            secret:
              secretName: database-mysql-vitess-ldap
              optional: false

          - name: ldap-tls
            secret:
              secretName: myloginspace-default-certificates
              optional: false
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            memory: 256Mi

  vitessDashboard:
    cells:
      - zone1
    extraFlags:
      security_policy: read-only
    replicas: 1
    resources:
      limits:
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

  vtadmin:
    rbac:
      name: core-cluster-config
      key: rbac.yaml
    cells:
      - zone1
    apiAddresses:
      - http://localhost:14001
    replicas: 1
    readOnly: false
    apiResources:
      limits:
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    webResources:
      limits:
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

  extraVitessFlags:
    tracer: opentracing-jaeger
    jaeger-agent-host: core-tempo-distributor.core-prod.svc.k0s.resolvemy.host:6831
    tracing-sampling-rate: '1'

  keyspaces:
    - name: bytebase
      turndownPolicy: Immediate
      vitessOrchestrator:
        configSecret:
          name: core-cluster-config
          key: orc_config.json

        resources:
          limits:
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi

      partitionings:
        - equal:
            parts: 1
            shardTemplate:
              databaseInitScriptSecret:
                name: core-cluster-config
                key: init_db.sql
              replication:
                enforceSemiSync: true

              tabletPools:
                - cell: zone1
                  type: replica
                  replicas: 3
                  vttablet:
                    extraFlags:
                      db_charset: utf8mb4
                      disable_active_reparents: "true"
                    resources:
                      limits:
                        memory: 2G
                      requests:
                        cpu: 100m
                        memory: 892Mi
                  mysqld:
                    resources:
                      limits:
                        memory: 2G
                      requests:
                        cpu: 100m
                        memory: 512Mi
                  dataVolumeClaimTemplate:
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 10Gi
  updateStrategy:
    type: Immediate
---
apiVersion: v1
kind: Secret
metadata:
  name: core-cluster-config
type: Opaque
stringData:
  users.json: |
    {
      "user": [{
        "UserData": "user",
        "Password": ""
      }]
    }
  init_db.sql: |
    # This file is executed immediately after mysql_install_db,
    # to initialize a fresh data directory.
    ###############################################################################
    # Equivalent of mysql_secure_installation
    ###############################################################################
    # Changes during the init db should not make it to the binlog.
    # They could potentially create errant transactions on replicas.
    SET sql_log_bin = 0;
    # Remove anonymous users.
    DELETE FROM mysql.user WHERE User = '';
    # Disable remote root access (only allow UNIX socket).
    DELETE FROM mysql.user WHERE User = 'root' AND Host != 'localhost';
    # Remove test database.
    DROP DATABASE IF EXISTS test;
    ###############################################################################
    # Vitess defaults
    ###############################################################################
    # Vitess-internal database.
    CREATE DATABASE IF NOT EXISTS _vt;
    # Note that definitions of local_metadata and shard_metadata should be the same
    # as in production which is defined in go/vt/mysqlctl/metadata_tables.go.
    CREATE TABLE IF NOT EXISTS _vt.local_metadata (
      name VARCHAR(255) NOT NULL,
      value VARCHAR(255) NOT NULL,
      db_name VARBINARY(255) NOT NULL,
      PRIMARY KEY (db_name, name)
      ) ENGINE=InnoDB;
    CREATE TABLE IF NOT EXISTS _vt.shard_metadata (
      name VARCHAR(255) NOT NULL,
      value MEDIUMBLOB NOT NULL,
      db_name VARBINARY(255) NOT NULL,
      PRIMARY KEY (db_name, name)
      ) ENGINE=InnoDB;
    # Admin user with all privileges.
    CREATE USER 'vt_dba'@'localhost';
    GRANT ALL ON *.* TO 'vt_dba'@'localhost';
    GRANT GRANT OPTION ON *.* TO 'vt_dba'@'localhost';
    # User for app traffic, with global read-write access.
    CREATE USER 'vt_app'@'localhost';
    GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, FILE,
      REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES,
      LOCK TABLES, EXECUTE, REPLICATION CLIENT, CREATE VIEW,
      SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER
      ON *.* TO 'vt_app'@'localhost';
    # User for app debug traffic, with global read access.
    CREATE USER 'vt_appdebug'@'localhost';
    GRANT SELECT, SHOW DATABASES, PROCESS ON *.* TO 'vt_appdebug'@'localhost';
    # User for administrative operations that need to be executed as non-SUPER.
    # Same permissions as vt_app here.
    CREATE USER 'vt_allprivs'@'localhost';
    GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, FILE,
      REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES,
      LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW,
      SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER
      ON *.* TO 'vt_allprivs'@'localhost';
    # User for slave replication connections.
    # TODO: Should we set a password on this since it allows remote connections?
    CREATE USER 'vt_repl'@'%';
    GRANT REPLICATION SLAVE ON *.* TO 'vt_repl'@'%';
    # User for Vitess filtered replication (binlog player).
    CREATE USER 'vt_filtered'@'localhost';
    GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, FILE,
      REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES,
      LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW,
      SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER
      ON *.* TO 'vt_filtered'@'localhost';
    # User for Orchestrator (https://github.com/openark/orchestrator).
    # TODO: Reenable when the password is randomly generated.
    CREATE USER 'orc_client_user'@'%' IDENTIFIED BY 'orc_client_user_password';
    GRANT SUPER, PROCESS, REPLICATION SLAVE, RELOAD
      ON *.* TO 'orc_client_user'@'%';
    GRANT SELECT
      ON _vt.* TO 'orc_client_user'@'%';
    FLUSH PRIVILEGES;
    RESET SLAVE ALL;
    RESET MASTER;
  rbac.yaml: |
    rules:
    - resource: "*"
      actions:
        - "get"
        - "create"
        - "put"
        - "ping"
      subjects: ["*"]
      clusters: ["*"]
    - resource: "Shard"
      actions:
        - "emergency_reparent_shard"
        - "planned_reparent_shard"
      subjects: ["*"]
      clusters:
        - "local"
  orc_config.json: |
    {
      "Debug": true,
      "MySQLTopologyUser": "orc_client_user",
      "MySQLTopologyPassword": "orc_client_user_password",
      "MySQLReplicaUser": "vt_repl",
      "MySQLReplicaPassword": "",
      "RecoveryPeriodBlockSeconds": 5
    }
