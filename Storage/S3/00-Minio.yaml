apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-backplane-storage-s3
  namespace: argocd

  annotations:
    argocd.argoproj.io/sync-wave: '0'
spec:
  generators:
    - list:
        elements:
          - cluster: dc1-k3s-node1
            url: https://kubernetes.default.svc
            environment: 'prod'
            ingress: minio.int.mylogin.space

  template:
    metadata:
      name: '{{cluster}}-minio'

      annotations:
        argocd.argoproj.io/manifest-generate-paths: .

    spec:
      project: core
      syncPolicy:
        automated:
          selfHeal: true
        syncOptions:
          - CreateNamespace=true
      source:
        repoURL: https://github.com/minio/operator.git
        path: helm/operator
        targetRevision: v7.0.0
        helm:
          releaseName: minio-operator-{{ environment }}
          values: |
            operator:
              ## Setup environment variables for the Operator
              env:
                - name: PROMETHEUS_NAMESPACE
                  value: 'core-prod'
                  
              #   - name: MINIO_OPERATOR_TLS_ENABLE
              #     value: "off"
              #   - name: CLUSTER_DOMAIN
              #     value: "cluster.domain"
              #   - name: WATCHED_NAMESPACE
              #     value: ""

              imagePullSecrets: [ ]
              initcontainers: [ ]
              replicaCount: 1
              securityContext:
                runAsUser: 1000
                runAsGroup: 1000
                runAsNonRoot: true
                fsGroup: 1000
              nodeSelector: { }
              affinity: { }
              tolerations: [ ]
              topologySpreadConstraints: [ ]
              resources:
                requests:
                  cpu: 200m
                  memory: 256Mi
                  ephemeral-storage: 500Mi

            console:
              imagePullSecrets: [ ]
              initcontainers: [ ]
              replicaCount: 1
              nodeSelector: { }
              affinity: { }
              tolerations: [ ]
              topologySpreadConstraints: [ ]
              resources: { }
              securityContext:
                runAsUser: 1000
                runAsNonRoot: true
              ingress:
                enabled: false

              volumes: [ ]
              volumeMounts: [ ]

      destination:
        server: '{{url}}'
        namespace: minio-operator
