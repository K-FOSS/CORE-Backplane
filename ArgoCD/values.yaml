argo-cd:
  fullnameOverride: 'argocd'
  nameOverride: argocd

  global:
    logging:
      # -- Set the global logging format. Either: `text` or `json`
      format: json
      # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
      level: warn

    networkPolicy:
      create: false
      defaultDenyIngress: false

    podLabels:
      logs: loki-myloginspace

    priorityClassName: 'tier2-priority'

  configs:
    rbac:
      # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
      # If false, it is expected the configmap will be created by something else.
      # Argo CD will not work if there is no configmap created with the name above.
      create: true

      # -- File containing user-defined policies and role definitions.
      # @default -- `''` (See [values.yaml])
      # Policy rules are in the form:
      #  p, subject, resource, action, object, effect
      # Role definitions and bindings are in the form:
      #  g, subject, inherited-subject
      policy.csv: |
        g, Developers, role:admin
        g, Server Admins, role:admin

      # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
      # The scope value can be a string, or a list of strings.
      scopes: "[groups]"

    # General Argo CD configuration
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    cm:
      # -- Create the argocd-cm configmap for [declarative setup]
      create: true

      # -- Argo CD's externally facing base URL (optional). Required when configuring SSO
      url: 'https://argo.writemy.codes'

      # -- Enable logs RBAC enforcement
      ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement
      server.rbac.log.enforce.enable: false

      # -- Enable exec feature in Argo UI
      ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
      exec.enabled: true

      oidc.config: |	
        name: Authentik	
        issuer: https://idp.mylogin.space/application/o/argocd/	
        clientID: $oidc.clientID	
        clientSecret: $oidc.clientSecret	
        requestedScopes: ["openid", "profile", "email"]

      # -- Enable local admin user
      ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
      admin.enabled: true

      # Configuration to customize resource behavior (optional) can be configured via splitted sub keys.
      # Keys are in the form: resource.customizations.ignoreDifferences.<group_kind>, resource.customizations.health.<group_kind>
      # resource.customizations.actions.<group_kind>, resource.customizations.knownTypeFields.<group-kind>
      # resource.customizations.ignoreResourceUpdates.<group-kind>
      resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
        jqPathExpressions:
        - '.webhooks[]?.clientConfig.caBundle'

      resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
        jqPathExpressions:
        - '.webhooks[]?.clientConfig.caBundle'

      resource.customizations.ignoreDifferences.batch_jobs: |
        jqPathExpressions:
          - .spec.podReplacementPolicy

      resource.ignoreResourceUpdatesEnabled: 'true'

      # Configuration to define customizations ignoring differences during watched resource updates to skip application reconciles.
      resource.customizations.ignoreResourceUpdates.all: |
        jsonPointers:
        - /metadata/resourceVersion

      # Configuration to define customizations ignoring differences during watched resource updates can be configured via splitted sub key.
      resource.customizations.ignoreResourceUpdates.argoproj.io_Application: |
        jsonPointers:
        - /status

      # jsonPointers and jqPathExpressions can be specified.
      resource.customizations.ignoreResourceUpdates.autoscaling_HorizontalPodAutoscaler: |
        jqPathExpressions:
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/behavior"'
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/conditions"'
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/metrics"'
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/current-metrics"'
        jsonPointers:
        - /metadata/annotations/autoscaling.alpha.kubernetes.io~1behavior
        - /metadata/annotations/autoscaling.alpha.kubernetes.io~1conditions
        - /metadata/annotations/autoscaling.alpha.kubernetes.io~1metrics
        - /metadata/annotations/autoscaling.alpha.kubernetes.io~1current-metrics

      resource.exclusions: |

        - apiGroups:
            - cilium.io
          kinds:
            - CiliumIdentity
          clusters:
            - "*"

        - apiGroups:
            - infra.contrib.fluxcd.io
          kinds:
            - Terraform
          clusters:
            - "*"

        - apiGroups:
            - "*"
          kinds:
            - ProviderConfigUsage    
          clusters:
            - "*"

        - apiGroups:
            - autoscaling.k8s.io
          kinds:
            - VerticalPodAutoscaler
            - VerticalPodAutoscalerCheckpoint
          clusters:
            - "*"

        - apiGroups:
            - monitoring.coreos.com
          kinds:
            - Prometheus
          clusters:
            - "*"

        - apiGroups:
            - velero.io
          kinds:
            - PodVolumeBackup
            - Backup
          clusters:
            - "*"

        - apiGroups:
            - discovery.k8s.io
          kinds:
            - EndpointSlice
          clusters:
            - "*"

        - apiGroups:
            - pxc.percona.com
          kinds:
            - PerconaXtraDBClusterBackup
          clusters:
            - "*"

    # Argo CD configuration parameters
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
    params:
      ## Redis
      redis.server: 'redis.mylogin.space:6379'
      redis.db: '10'

      ## Generic parameters

      ## Controller Properties

      # -- Number of application status processors
      controller.status.processors: '10'

      # -- Number of application operation processors
      controller.operation.processors: '5'

      # Set the logging format. One of: text|json (default "text")
      controller.log.format: 'json'
      # Set the logging level. One of: debug|info|warn|error (default "info")
      controller.log.level: 'warn'

      # Specifies if resource health should be persisted in app CRD (default true)
      # Changing this to `false` significantly reduce number of Application CRD updates and improves controller performance.
      # However, disabling resource health by default might affect applications that communicate with Applications CRD directly
      # so we have to defer switching this to `false` by default till v3.0 release.
      controller.resource.health.persist: 'false'

      ## Server properties

      # -- Run server without TLS
      server.insecure: true

      # -- Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from /
      server.basehref: /

      # -- Used if Argo CD is running behind reverse proxy under subpath different from /
      server.rootpath: ''

      # -- Directory path that contains additional static assets
      server.staticassets: /shared/app

      # -- Disable Argo CD RBAC for user authentication
      server.disable.auth: false

      # -- Enable GZIP compression
      server.enable.gzip: true

      # -- Set X-Frame-Options header in HTTP responses to value. To disable, set to "".
      server.x.frame.options: sameorigin

      repo.server: 'argocd-repo-server.argocd.svc.cluster.local:8081'




  controller:
    name: application-controller

    replicas: 1

    metrics:
      applicationLabels:
        enabled: false
        labels: {}

      enabled: true

      rules:
        enabled: false

      service:
        annotations: {}
        labels: {}
        servicePort: 8082

      serviceMonitor:
        additionalLabels:
          resolvemy.host/metrics: mimir

        enabled: true
        interval: 5m
        metricRelabelings: null
        namespace: ''
        relabelings: null
        selector: {}


    clusterAdminAccess:
      enabled: true

    clusterRoleRules:
      enabled: false
      rules: null

    containerPort: 8082
    enableStatefulSet: true

    nodeSelector: {}

  createAggregateRoles: false


  repoServer:
    replicas: 3

    resources:
      requests:
        cpu: 23m
        memory: 145M
      limits:
        cpu: 23m
        memory: 145M


    envFrom:
      - secretRef:
          name: argocd-vault-replacer-credentials

  server:
    metrics:
      enabled: true
      service:
        servicePort: 8083

      serviceMonitor:
        enabled: true

        additionalLabels:
          resolvemy.host/metrics: mimir

        interval: 5m

        metricRelabelings: null
        namespace: ''
        relabelings: null
        selector: {}

    route:
      enabled: false

    staticAssets:
      enabled: true


  applicationSet:
    # -- Enable Application Set controller
    enabled: true

    ## Webhook for the Git Generator
    ## Ref: https://argocd-applicationset.readthedocs.io/en/master/Generators-Git/#webhook-configuration)
    webhook:
      ingress:
        # -- Enable an ingress resource for Webhooks
        enabled: false

  notifications:
    # -- Enable Notifications controller
    enabled: true

    metrics:
      # -- Enables prometheus metrics server
      enabled: false

      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: false
        # -- Prometheus ServiceMonitor selector
        selector: {}
          # prometheus: kube-prometheus
        # -- Prometheus ServiceMonitor labels
        additionalLabels:
          resolvemy.host/metrics: mimir



  dex:
    enabled: false


  openshift:
    enabled: false


  redis:
    enabled: false


  redis-ha:
    enabled: false
