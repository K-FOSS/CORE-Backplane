argo-cd:
  fullnameOverride: 'argocd'
  nameOverride: argocd

  global:
    logging:
      # -- Set the global logging format. Either: `text` or `json`
      format: json
      # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
      level: warn

    networkPolicy:
      create: false
      defaultDenyIngress: false

    podLabels:
      logs: loki-myloginspace

    priorityClassName: 'tier2-priority'

  configs:
    rbac:
      # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
      # If false, it is expected the configmap will be created by something else.
      # Argo CD will not work if there is no configmap created with the name above.
      create: true

      # -- File containing user-defined policies and role definitions.
      # @default -- `''` (See [values.yaml])
      # Policy rules are in the form:
      #  p, subject, resource, action, object, effect
      # Role definitions and bindings are in the form:
      #  g, subject, inherited-subject
      policy.csv: |
        g, Developers, role:admin
        g, Server Admins, role:admin

      # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
      # The scope value can be a string, or a list of strings.
      scopes: "[groups]"

    # General Argo CD configuration
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    cm:
      # -- Create the argocd-cm configmap for [declarative setup]
      create: true

      # -- Argo CD's externally facing base URL (optional). Required when configuring SSO
      url: 'https://argo.writemy.codes'

      # -- Enable logs RBAC enforcement
      ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement
      server.rbac.log.enforce.enable: false

      # -- Enable exec feature in Argo UI
      ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
      exec.enabled: true

      oidc.config: |	
        name: Authentik	
        issuer: https://idp.mylogin.space/application/o/argocd/	
        clientID: $oidc.clientID	
        clientSecret: $oidc.clientSecret	
        requestedScopes: ["openid", "profile", "email"]

      # -- Enable local admin user
      ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
      admin.enabled: true

      # -- Timeout to discover if a new manifests version got published to the repository
      timeout.reconciliation: 180s

      # -- Timeout to refresh application data as well as target manifests cache
      timeout.hard.reconciliation: 0s

      #
      # Things to Ignore
      # Thanks to https://github.com/zacheryph/k8s-gitops/blob/bfe0e0cb432858aceb7aa85cda49a7954429a2c1/bootstrap/argocd/values.yaml#L91
      # And https://github.com/ocf/kubernetes/blob/fcc5c83d1dcf7109662fa9dd7ef027b2be29dfa9/apps/argocd.py#L64
      # For some examples and inspiration
      #
      resource.customizations.ignoreDifferences.apiextensions.k8s.io_CustomResourceDefinition: |
        jqPathExpressions:
        - '.spec.conversion.webhook.clientConfig.caBundle'

      # ignore external-secrets modifying spec
      resource.customizations.ignoreDifferences.external-secrets.io_ExternalSecret: |
        jqPathExpressions:
        - '.spec.data[]?.remoteRef.conversionStrategy'
        - '.spec.data[]?.remoteRef.decodingStrategy'
        - '.spec.data[]?.remoteRef.metadataPolicy'
        - '.spec.dataFrom[]?.extract.conversionStrategy'
        - '.spec.dataFrom[]?.extract.decodingStrategy'
        - '.spec.dataFrom[]?.extract.metadataPolicy'

      # ignore kind/version injection in stateful set volume claims
      resource.customizations.ignoreDifferences.apps_StatefulSet: |
        jqPathExpressions:
        - '.spec.volumeClaimTemplates[]?.apiVersion'
        - '.spec.volumeClaimTemplates[]?.kind'

      # a lot of things produce cluster roles and dynamically set rules
      # knative, triggermesh, ?
      resource.customizations.ignoreDifferences.rbac.authorization.k8s.io_ClusterRole: |
        jqPathExpressions:
        - '.rules'

      # Configuration to customize resource behavior (optional) can be configured via splitted sub keys.
      # Keys are in the form: resource.customizations.ignoreDifferences.<group_kind>, resource.customizations.health.<group_kind>
      # resource.customizations.actions.<group_kind>, resource.customizations.knownTypeFields.<group-kind>
      # resource.customizations.ignoreResourceUpdates.<group-kind>
      resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
        jqPathExpressions:
        - '.webhooks[]?.clientConfig.caBundle'

      resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
        jqPathExpressions:
        - '.webhooks[]?.clientConfig.caBundle'
        - '.webhooks[]?.failurePolicy'

      resource.customizations.ignoreDifferences.batch_jobs: |
        jqPathExpressions:
          - .spec.podReplacementPolicy

      # Configuration to define customizations ignoring differences during watched resource updates to skip application reconciles.
      resource.customizations.ignoreResourceUpdates.all: |
        jsonPointers:
        - /metadata/resourceVersion

      resource.compareoptions: |
        ignoreDifferencesOnResourceUpdates: true

      # Configuration to define customizations ignoring differences during watched resource updates can be configured via splitted sub key.
      resource.customizations.ignoreResourceUpdates.argoproj.io_Application: |
        jsonPointers:
        - /status

      resource.customizations.ignoreResourceUpdates.external-secrets.io_ExternalSecret: |
        jsonPointers:
        - /status/refreshTime

      resource.customizations.ignoreResourceUpdates.velero.io_BackupStorageLocation: |
        jsonPointers:
          - /status/lastSyncedTime
          - /status/lastValidationTime

      # jsonPointers and jqPathExpressions can be specified.
      resource.customizations.ignoreResourceUpdates.autoscaling_HorizontalPodAutoscaler: |
        jqPathExpressions:
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/behavior"'
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/conditions"'
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/metrics"'
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/current-metrics"'
        jsonPointers:
        - /metadata/annotations/autoscaling.alpha.kubernetes.io~1behavior
        - /metadata/annotations/autoscaling.alpha.kubernetes.io~1conditions
        - /metadata/annotations/autoscaling.alpha.kubernetes.io~1metrics
        - /metadata/annotations/autoscaling.alpha.kubernetes.io~1current-metrics

      resource.exclusions: |
        - apiGroups:
            - cilium.io
          kinds:
            - CiliumIdentity
          clusters:
            - "*"

        - apiGroups:
            - "*"
          kinds:
            - ProviderConfigUsage    
          clusters:
            - "*"

        - apiGroups:
            - autoscaling.k8s.io
          kinds:
            - VerticalPodAutoscaler
            - VerticalPodAutoscalerCheckpoint
          clusters:
            - "*"

        - apiGroups:
            - velero.io
          kinds:
            - PodVolumeBackup
            - Backup
          clusters:
            - "*"

        - apiGroups:
            - discovery.k8s.io
          kinds:
            - EndpointSlice
          clusters:
            - "*"

        - apiGroups:
            - pxc.percona.com
          kinds:
            - PerconaXtraDBClusterBackup
          clusters:
            - "*"

    # Argo CD configuration parameters
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
    params:
      ## Redis
      redis.server: 'redis.mylogin.space:6379'
      redis.db: '10'

      ## Generic parameters

      otlp.address: 'core-tempo-distributor.core-prod.svc.k0s.resolvemy.host:4317'

      ## Controller Properties
      # -- Number of application status processors
      controller.status.processors: 20

      # -- Number of application operation processors
      controller.operation.processors: 10

      # -- Specifies timeout between application self heal attempts
      controller.self.heal.timeout.seconds: 5

      # -- Repo server RPC call timeout seconds.
      controller.repo.server.timeout.seconds: 900

      ## Controller Properties
      controller.diff.server.side: 'true'

      controller.kubectl.parallelism.limit: '35'

      # Set the logging format. One of: text|json (default "text")
      controller.log.format: 'json'
      # Set the logging level. One of: debug|info|warn|error (default "info")
      controller.log.level: 'debug'

      ## Server properties

      # -- Run server without TLS
      server.insecure: true

      # -- Directory path that contains additional static assets
      server.staticassets: /shared/app

      # -- Disable Argo CD RBAC for user authentication
      server.disable.auth: false

      server.repo.server.timeout.seconds: '900'

      # -- Enable GZIP compression
      server.enable.gzip: true

      repo.server: 'argocd-repo-server.argocd.svc.cluster.local:8081'

      #
      # Repo Server
      #
      reposerver.parallelism.limit: '50'

  controller:
    name: application-controller

    replicas: 3

    env:
      - name: ARGO_CD_UPDATE_CLUSTER_INFO_TIMEOUT
        value: '10'

  repoServer:
    replicas: 1

    env:
      - name: ARGOCD_EXEC_TIMEOUT
        value: 10m30s

  server:
    replicas: 3

    metrics:
      enabled: true

      serviceMonitor:
        enabled: true

        additionalLabels:
          resolvemy.host/metrics: mimir

        interval: 5m

    route:
      enabled: false

    staticAssets:
      enabled: true


  applicationSet:
    # -- Enable Application Set controller
    enabled: true

    ## Webhook for the Git Generator
    ## Ref: https://argocd-applicationset.readthedocs.io/en/master/Generators-Git/#webhook-configuration)
    webhook:
      ingress:
        # -- Enable an ingress resource for Webhooks
        enabled: false

  notifications:
    # -- Enable Notifications controller
    enabled: true

  dex:
    enabled: false


  openshift:
    enabled: false


  redis:
    enabled: false


  redis-ha:
    enabled: false
