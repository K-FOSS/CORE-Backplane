# apps/v1/Deployment ws-manager-bridge
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-manager-bridge

  labels:
    app: gitpod
    component: ws-manager-bridge
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: ws-manager-bridge

  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate

  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: d2408af6fff0bc982233c1bb2e27f3df64da2b29862d1a0d01c8014fe583d5f6
      labels:
        app: gitpod
        component: ws-manager-bridge
      name: ws-manager-bridge
      namespace: core-prod
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: gitpod.io/workload_meta
                operator: Exists
      containers:
        - name: ws-manager-bridge

          {{- with .Values.wsbridge.image }}
          image: '{{ .repository }}{{ if .digest }}@{{ .digest }}{{ else }}:{{ .tag }}{{ end }}'
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}

          env:
            - name: GITPOD_DOMAIN
              value: gitpods.writemy.codes
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: default
            - name: GITPOD_REGION
              value: us-east-1
            - name: HOST_URL
              value: https://gitpods.writemy.codes
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.k0s.resolvemy.host
            - name: LOG_LEVEL
              value: debug
            - name: JAEGER_ENDPOINT
              value: http://k0s-dc1-tempo-core-tempo-distributed-distributor-core-prod.service.dc1.kjdev:14268/api/traces
            - name: JAEGER_SAMPLER_TYPE
              value: const
            - name: JAEGER_SAMPLER_PARAM
              value: "0.025"
            - name: MESSAGEBUS_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: rabbitmq
            - name: MESSAGEBUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: rabbitmq
            - name: MESSAGEBUS_CA
              valueFrom:
                secretKeyRef:
                  key: ca.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_CERT
              valueFrom:
                secretKeyRef:
                  key: tls.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_KEY
              valueFrom:
                secretKeyRef:
                  key: tls.key
                  name: messagebus-certificates-secret-core
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: mysql
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: mysql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: mysql
            - name: DB_ENCRYPTION_KEYS
              valueFrom:
                secretKeyRef:
                  key: encryptionKeys
                  name: mysql
            - name: DB_DELETED_ENTRIES_GC_ENABLED
              value: "false"
            - name: WSMAN_BRIDGE_CONFIGPATH
              value: /config/ws-manager-bridge.json


          ports:
            - containerPort: 9500
              name: metrics

          resources:
            requests:
              cpu: 100m
              memory: 64Mi

          securityContext:
            privileged: false
            runAsUser: 31001
          volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true

            - name: ws-manager-client-tls-certs
              mountPath: /ws-manager-client-tls-certs
              readOnly: true

        - name: kube-rbac-proxy
          image: quay.io/brancz/kube-rbac-proxy:v0.12.0
          args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

          
          ports:
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError

      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      initContainers:
        - name: database-waiter

          {{- with .Values.migrations.image }}
          image: '{{ .repository }}{{ if .digest }}@{{ .digest }}{{ else }}:{{ .tag }}{{ end }}'
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}


          args:
            - -v
            - database
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: mysql
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: mysql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: mysql
            - name: DB_ENCRYPTION_KEYS
              valueFrom:
                secretKeyRef:
                  key: encryptionKeys
                  name: mysql
            - name: DB_DELETED_ENTRIES_GC_ENABLED
              value: "false"

          resources: {}
          securityContext:
            privileged: false
            runAsUser: 31001

        - name: msgbus-waiter

          {{- with .Values.migrations.image }}
          image: '{{ .repository }}{{ if .digest }}@{{ .digest }}{{ else }}:{{ .tag }}{{ end }}'
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}


          args:
          - -v
          - messagebus
          env:
            - name: MESSAGEBUS_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: rabbitmq

            - name: MESSAGEBUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: rabbitmq

            - name: MESSAGEBUS_CA
              valueFrom:
                secretKeyRef:
                  key: ca.crt
                  name: messagebus-certificates-secret-core

            - name: MESSAGEBUS_CERT
              valueFrom:
                secretKeyRef:
                  key: tls.crt
                  name: messagebus-certificates-secret-core

            - name: MESSAGEBUS_KEY
              valueFrom:
                secretKeyRef:
                  key: tls.key
                  name: messagebus-certificates-secret-core

          resources: {}
          securityContext:
            privileged: false
            runAsUser: 31001
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccountName: ws-manager-bridge
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          configMap:
            name: ws-manager-bridge-config
          
        - name: ws-manager-client-tls-certs
          secret:
            secretName: ws-manager-client-tls
