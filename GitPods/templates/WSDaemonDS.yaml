# apps/v1/DaemonSet ws-daemon
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: gitpod
    component: ws-daemon
  name: ws-daemon
  namespace: core-prod
spec:
  selector:
    matchLabels:
      app: gitpod
      component: ws-daemon
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: 6ad59fb379752e27c72b1823f6930ff0bf06dc5dc5b8f7a01be6ea6371151984
        seccomp.security.alpha.kubernetes.io/shiftfs-module-loader: unconfined
      labels:
        app: gitpod
        component: ws-daemon
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: gitpod.io/workload_workspace_regular
                operator: Exists
            - matchExpressions:
              - key: gitpod.io/workload_workspace_headless
                operator: Exists
      containers:
        - name: ws-daemon

          image: registry.writemy.codes/workspaces/gitpod-core-dev/build/ws-daemon:commit-8b296463e50b0ac971dae9bd3354e5111d6c1702
          imagePullPolicy: IfNotPresent

          args:
            - run
            - --config
            - /config/config.json
          
          env:
            - name: GITPOD_DOMAIN
              value: gitpods.writemy.codes

            - name: GITPOD_INSTALLATION_SHORTNAME
              value: default

            - name: GITPOD_REGION
              value: us-east-1

            - name: HOST_URL
              value: https://gitpods.writemy.codes

            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

            - name: KUBE_DOMAIN
              value: svc.k0s.resolvemy.host

            - name: LOG_LEVEL
              value: debug

            - name: JAEGER_ENDPOINT
              value: http://k0s-dc1-tempo-core-tempo-distributed-distributor-core-prod.service.dc1.kjdev:14268/api/traces

            - name: JAEGER_SAMPLER_TYPE
              value: const

            - name: JAEGER_SAMPLER_PARAM
              value: "1"

            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName


          lifecycle:
            postStart:
              exec:
                command:
                - /bin/bash
                - -c
                - wait4x http http://localhost:8086/ready -t30s --expect-status-code
                  200 && kubectl label --overwrite nodes ${NODENAME} gitpod.io/ws-daemon_ready_ns_${KUBE_NAMESPACE}=true
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - kubectl label nodes ${NODENAME} gitpod.io/ws-daemon_ready_ns_${KUBE_NAMESPACE}-
          
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /live
              port: 8086
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          
          ports:
            - containerPort: 8080
              hostPort: 8080
              name: rpc

          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: 8086
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 2
            timeoutSeconds: 1

          resources:
            requests:
              cpu: 1m
              memory: 1Mi

          securityContext:
            privileged: true

          volumeMounts:
            - mountPath: /mnt/workingarea
              mountPropagation: Bidirectional
              name: working-area

            - mountPath: /config
              name: config

            - mountPath: /mnt/containerd.sock
              name: containerd-socket

            - mountPath: /mnt/node0
              name: node-fs0

            - mountPath: /mnt/mounts
              mountPropagation: HostToContainer
              name: node-mounts
              readOnly: true

            - mountPath: /mnt/node-cgroups
              mountPropagation: HostToContainer
              name: node-cgroups

            - mountPath: /mnt/hosts
              name: node-hosts

            - mountPath: /certs
              name: tls-certs

            - mountPath: /mnt/sync-tmp
              name: gcloud-tmp

            - mountPath: /mnt/secrets/storage
              name: storage-volume
              readOnly: true

        - name: kube-rbac-proxy

          image: quay.io/brancz/kube-rbac-proxy:v0.12.0

          args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

          
          ports:
            - containerPort: 9500
              name: metrics

          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError

      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      hostPID: true
      initContainers:
        - name: disable-kube-health-monitor

          image: ubuntu:20.04

          args:
            - "exec {BASH_XTRACEFD}>&1 # this causes 'set -x' to write to stdout insted
              of stderr\nset -euExo pipefail\nsystemctl status kube-container-runtime-monitor.service
              || true\nif [ \"$(systemctl is-active kube-container-runtime-monitor.service)\"
              == \"active\" ]\nthen\n\techo \"kube-container-runtime-monitor.service is
              active\"\n\tsystemctl stop kube-container-runtime-monitor.service\n\tsystemctl
              disable kube-container-runtime-monitor.service\n\tsystemctl status kube-container-runtime-monitor.service
              || true\nelse\n\techo \"kube-container-runtime-monitor.service is not active,
              not doing anything\"\nfi\n"
          command:
            - /usr/bin/nsenter
            - -t
            - "1"
            - -a
            - /bin/bash
            - -c
          
          resources: {}
          securityContext:
            privileged: true
            procMount: Default
        - name: seccomp-profile-installer

          image: registry.writemy.codes/workspaces/gitpod-core-dev/build/seccomp-profile-installer:commit-df6f9b5ab510202c5719724d67c00bff8ee83000

          command:
          - /bin/sh
          - -c
          - cp -f /installer/workspace_default.json /mnt/dst/workspace_default_release-2022.05.2.5.json

          
          resources: {}
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /mnt/dst
              name: hostseccomp
    
        - name: sysctl

          image: registry.writemy.codes/workspaces/gitpod-core-dev/build/ws-daemon:commit-8b296463e50b0ac971dae9bd3354e5111d6c1702

          command:
          - sh
          - -c
          - "(\n\techo \"running sysctls\" &&\n\tsysctl -w net.core.somaxconn=4096 &&\n\tsysctl
            -w \"net.ipv4.ip_local_port_range=5000 65000\" &&\n\tsysctl -w \"net.ipv4.tcp_tw_reuse=1\"
            &&\n\tsysctl -w fs.inotify.max_user_watches=1000000 &&\n\tsysctl -w \"kernel.dmesg_restrict=1\"
            &&\n\tsysctl -w vm.unprivileged_userfaultfd=0\n) && echo \"done!\" || echo
            \"failed!\"\n"

          
          resources: {}
          securityContext:
            privileged: true
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccountName: ws-daemon
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/disk-pressure
        operator: Exists
      - effect: NoExecute
        key: node.kubernetes.io/memory-pressure
        operator: Exists
      - effect: NoExecute
        key: node.kubernetes.io/out-of-disk
        operator: Exists
      volumes:
      - hostPath:
          path: /
        name: hostfs
      - hostPath:
          path: /var/gitpod/workspaces
          type: DirectoryOrCreate
        name: working-area
      - name: tls-certs
        secret:
          secretName: ws-daemon-tls
      - configMap:
          name: ws-daemon
        name: config
      - hostPath:
          path: /run/containerd/containerd.sock
          type: Socket
        name: containerd-socket
      - hostPath:
          path: /var/lib/containerd/io.containerd.runtime.v2.task/k8s.io
          type: Directory
        name: node-fs0
      - hostPath:
          path: /proc/mounts
          type: File
        name: node-mounts
      - hostPath:
          path: /sys/fs/cgroup
          type: Directory
        name: node-cgroups
      - hostPath:
          path: /etc/hosts
          type: File
        name: node-hosts
      - hostPath:
          path: /usr/src
          type: Directory
        name: node-linux-src
      - hostPath:
          path: /var/lib/kubelet/seccomp
        name: hostseccomp
      - hostPath:
          path: /var/gitpod/tmp/backup
          type: DirectoryOrCreate
        name: gcloud-tmp
      - name: storage-volume
        secret:
          secretName: storage-s3
  updateStrategy: {}
