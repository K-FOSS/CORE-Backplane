authentik:
  # -- Server replicas
  replicas: 3

  enabled: true

  ldap:
    enabled: true
    replicas: 2

  common:
    podLabels:
      logs: loki-myloginspace

  priorityClassName: 'tier2-priority'

  worker:
    # -- worker replicas
    replicas: 2

  podLabels:
    logs: loki-myloginspace

  ingress:
    enabled: false

  authentik:
    # -- Log level for server and worker
    log_level: warning

    # -- Mode for the avatars. Defaults to gravatar. Possible options 'gravatar' and 'none'
    avatars: gravatar

    email:
      # -- SMTP Server emails are sent from, fully optional
      host: mail.mylogin.space

      port: 25

      # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
      use_tls: true

      # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
      use_ssl: false

      # -- Connection timeout
      timeout: 30

      # -- Email from address, can either be in the format "foo@bar.baz" or "authentik <foo@bar.baz>"
      from: bots@mylogin.space

    error_reporting:
      # -- This sends anonymous usage-data, stack traces on errors and
      # performance data to sentry.beryju.org, and is fully opt-in
      enabled: false
      # -- This is a string that is sent to sentry with your error reports
      environment: "k8s"
      # -- Send PII (Personally identifiable information) data to sentry
      send_pii: false


    postgresql:
      # -- set the postgresql hostname to talk to
      # if unset and .Values.postgresql.enabled == true, will generate the default
      # @default -- `{{ .Release.Name }}-postgresql`
      host: psql.mylogin.space
      port: 5432

    redis:
      # -- set the redis hostname to talk to
      # @default -- `{{ .Release.Name }}-redis-master`
      host: 10.1.1.68
      password: ""

  # -- see configuration options at https://goauthentik.io/docs/installation/configuration/
  env:
    AUTHENTIK_REDIS__CACHE_DB: '1'
    AUTHENTIK_REDIS__MESSAGE_QUEUE_DB: '2'
    AUTHENTIK_REDIS__WS_DB: '3'
    AUTHENTIK_REDIS__OUTPOST_SESSION_DB: '4'

  envValueFrom:
    AUTHENTIK_SECRET_KEY:
      secretKeyRef:
        key: SecretKey
        name: authentik-database-prod

    AUTHENTIK_POSTGRESQL__NAME:
      secretKeyRef:
        key: Database
        name: authentik-database-prod

    AUTHENTIK_POSTGRESQL__USER:
      secretKeyRef:
        key: Username
        name: authentik-database-prod

    AUTHENTIK_POSTGRESQL__PASSWORD:
      secretKeyRef:
        key: Password
        name: authentik-database-prod


  service:
    # -- Service that is created to access authentik
    enabled: true
    type: ClusterIP
    sessionAffinity: ClientIP
    port: 80
    name: http
    protocol: TCP

  prometheus:
    serviceMonitor:
      create: true
      interval: 30s
      scrapeTimeout: 3s
    rules:
      create: true

  postgresql:
    # -- enable the bundled bitnami postgresql chart
    enabled: false

  redis:
    # -- enable the bundled bitnami redis chart
    enabled: false
    architecture: standalone
    auth:
      enabled: false

openldap:
  tls:
    secretName: myloginspace-default-certificates

orchestra-login-portal-argocd:
  enabled: false

  network:
    openunison_host: "k8sou.apps.domain.int"
    dashboard_host: "k8sdb.apps.domain.int"
    api_server_host: "k8sapi.apps.domain.int"
    session_inactivity_timeout_seconds: 900
    k8s_url: https://10.1.1.40:6443
    createIngressCertificate: false
    ingress_type: simple
    ingress_annotations: {}
    

  cert_template:
    ou: "Kubernetes"
    o: "MyOrg"
    l: "My Cluster"
    st: "State of Cluster"
    c: "MyCountry"

  image: "ghcr.io/openunison/openunison-k8s:1.0.39"
  amq_image: "ghcr.io/tremolosecurity/activemq-docker:5.16.6"
  cert_update_image: "ghcr.io/openunison/openunison-kubernetes-operator:1.0.4"
  myvd_config_path: "WEB-INF/myvd.conf"
  k8s_cluster_name: kubernetes
  enable_impersonation: true
  myvd_configmap: myvd

  dashboard:
    namespace: "kubernetes-dashboard"
    cert_name: "kubernetes-dashboard-certs"
    label: "k8s-app=kubernetes-dashboard"
    service_name: kubernetes-dashboard
    enabled: true
  certs:
    use_k8s_cm: false

  trusted_certs: []


  #active_directory:
  #  base: cn=users,dc=ent2k12,dc=domain,dc=com
  #  host: "192.168.2.75"
  #  port: "636"
  #  bind_dn: "cn=Administrator,cn=users,dc=ent2k12,dc=domain,dc=com"
  #  con_type: ldaps
  #  srv_dns: "false"

  # database:
  #   hibernate_dialect: org.hibernate.dialect.MySQL5InnoDBDialect
  #   quartz_dialect: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
  #   driver: com.mysql.jdbc.Driver
  #   url: jdbc:mysql://dbs.tremolo.lan:3308/unison
  #   user: root
  #   validation: SELECT 1

  # smtp:
  #   host: smtp.gmail.com
  #   port: 587
  #   user: donotreply@domain.com
  #   from: donotreply@domain.com
  #   tls: true

  monitoring:
    prometheus_service_account: system:serviceaccount:monitoring:prometheus-k8s

  impersonation:
    use_jetstack: true
    jetstack_oidc_proxy_image: ghcr.io/tremolosecurity/kube-oidc-proxy:1.0.6
    explicit_certificate_trust: true
    ca_secret_name: ou-tls-certificate

  network_policies:
    enabled: false
    ingress:
      enabled: true
      labels: []
    monitoring:
      enabled: true
      labels: []
    apiserver:
      enabled: true
      labels: []
    namespace_label: kubernetes.io/metadata.name
        

  services:
    enable_tokenrequest: false
    token_request_audience: api
    token_request_expiration_seconds: 600
    node_selectors: []
    tolerations: []
    pullSecret: ""
    liveness_probe:
    - /usr/local/openunison/bin/check_alive.sh
    - "https://127.0.0.1:8443/auth/idp/k8sIdp/.well-known/openid-configuration"
    - "issuer"
    - "https://127.0.0.1:8443/check_alive"
    - "alive"
    readiness_probe:
    - /usr/local/openunison/bin/check_alive.sh
    - "https://127.0.0.1:8443/auth/idp/k8sIdp/.well-known/openid-configuration"
    - "issuer"
    - "https://127.0.0.1:8443/check_alive"
    - "alive"

  operator:
    image: ghcr.io/openunison/openunison-kubernetes-operator:1.0.4
    validators: []
    mutators: []
    resources:
      requests:
        memory: 200Mi
        cpu: 0.3
      limits:
        memory: 200Mi
        cpu: 1.0

  openunison:
    apps: []
    imagePullPolicy: Always
    replicas: 1
    non_secret_data: {}
    secrets: []
    role_attribute: portalGroups
    groups:
      areJson: "true"
    env: {}
    portal_release_name: openunison
    authentication:
      refresh_token:
        grace_period_millis: 0
    html:
      image: ghcr.io/openunison/openunison-k8s-html:1.0.0
      legacy: false
      theme:
        startPage: front-page
        hidePages: []
        colors:
          primary: 
            main: "#AC1622"
            dark: "#780f17"
            light: "#bc444e"
          secondary:
            main: "#16aca0"
            dark: "#0f7870"
            light: "#44bcb3"
          error: "#ff1744"
    enable_provisioning: false
    enable_activemq: true
    az_groups: []
    precheck:
      image: ghcr.io/tremolosecurity/python3:1.0.0
    use_standard_jit_workflow: true
    management_proxy:
      enabled: false
    naas:
      forms:
        new_namespace:
          use_default: true
      workflows:
        new_namespace:
          use_default: true
      groups:
        internal:
          enabled: true
          suffix: "-internal"
        external:
          suffix: "-external"
          enabled: false
          admin_group: "CN=openunison-admins,CN=Users,DC=ent2k12,DC=domain,DC=com"
          cluster_admin_group: "CN=k8s_login_ckuster_admins,CN=Users,DC=ent2k12,DC=domain,DC=com"
      reasons: []

  crd:
    deploy: true
    betas: false
