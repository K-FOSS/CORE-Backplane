authentik:
  # -- Server replicas
  replicas: 1

  enabled: true

  ldap:
    enabled: true
    replicas: 2

  common:
    podLabels:
      logs: loki-myloginspace

  priorityClassName: 'tier2-priority'

  worker:
    # -- worker replicas
    replicas: 2

  podLabels:
    logs: loki-myloginspace

  ingress:
    enabled: false

  authentik:
    # -- Log level for server and worker
    log_level: warning

    # -- Mode for the avatars. Defaults to gravatar. Possible options 'gravatar' and 'none'
    avatars: gravatar

    email:
      # -- SMTP Server emails are sent from, fully optional
      host: mail.mylogin.space

      port: 25

      # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
      use_tls: true

      # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
      use_ssl: false

      # -- Connection timeout
      timeout: 30

      # -- Email from address, can either be in the format "foo@bar.baz" or "authentik <foo@bar.baz>"
      from: bots@mylogin.space

    error_reporting:
      # -- This sends anonymous usage-data, stack traces on errors and
      # performance data to sentry.beryju.org, and is fully opt-in
      enabled: false
      # -- This is a string that is sent to sentry with your error reports
      environment: "k8s"
      # -- Send PII (Personally identifiable information) data to sentry
      send_pii: false


    postgresql:
      # -- set the postgresql hostname to talk to
      # if unset and .Values.postgresql.enabled == true, will generate the default
      # @default -- `{{ .Release.Name }}-postgresql`
      host: psql.mylogin.space
      password: ""
      port: 5432
      name: 

    redis:
      # -- set the redis hostname to talk to
      # @default -- `{{ .Release.Name }}-redis-master`
      host: 10.1.1.68
      password: ""

  # -- see configuration options at https://goauthentik.io/docs/installation/configuration/
  env:
    AUTHENTIK_REDIS__CACHE_DB: '1'
    AUTHENTIK_REDIS__MESSAGE_QUEUE_DB: '2'
    AUTHENTIK_REDIS__WS_DB: '3'
    AUTHENTIK_REDIS__OUTPOST_SESSION_DB: '4'

  envValueFrom:
    AUTHENTIK_SECRET_KEY:
      secretKeyRef:
        key: SecretKey
        name: authentik-database-prod

    AUTHENTIK_POSTGRESQL__NAME:
      secretKeyRef:
        key: Database
        name: authentik-database-prod

    AUTHENTIK_POSTGRESQL__USER:
      secretKeyRef:
        key: Username
        name: authentik-database-prod

    AUTHENTIK_POSTGRESQL__PASSWORD:
      secretKeyRef:
        key: Password
        name: authentik-database-prod


  service:
    # -- Service that is created to access authentik
    enabled: true
    type: ClusterIP
    sessionAffinity: ClientIP
    port: 80
    name: http
    protocol: TCP

  prometheus:
    serviceMonitor:
      create: true
      interval: 30s
      scrapeTimeout: 3s
    rules:
      create: true

  postgresql:
    # -- enable the bundled bitnami postgresql chart
    enabled: false

  redis:
    # -- enable the bundled bitnami redis chart
    enabled: false
    architecture: standalone
    auth:
      enabled: false

openldap:
  tls:
    secretName: myloginspace-default-certificates

openunision:
  network:
    openunison_host: k8s-ou.domain.dev
    dashboard_host: k8s-db.domain.dev
    api_server_host: k8s-api.domain.dev
    session_inactivity_timeout_seconds: 900
    k8s_url: https://10.1.1.40:6443
    force_redirect_to_tls: false
    createIngressCertificate: false
    ingress_type: nginx
    ingress_annotations: []
      

  cert_template:
    ou: 'Kubernetes'
    o: 'MyOrg'
    l: 'My Cluster'
    st: 'State of Cluster'
    c: 'MyCountry'


  
  myvd_config_path: "WEB-INF/myvd.conf"
  k8s_cluster_name: my-cluster
  enable_impersonation: false

  impersonation:
    use_jetstack: true
    explicit_certificate_trust: true

  dashboard:
    namespace: "kubernetes-dashboard"
    cert_name: "kubernetes-dashboard-certs"
    label: "k8s-app=kubernetes-dashboard"
    service_name: kubernetes-dashboard
    require_session: true

  certs:
    use_k8s_cm: true

  trusted_certs: []

  monitoring:
    prometheus_service_account: system:serviceaccount:monitoring:prometheus-k8s





  # Uncomment one of the below options for authentication
  #active_directory:
  #  base: cn=users,dc=ent2k12,dc=domain,dc=com
  #  host: "192.168.2.75"
  #  port: "636"
  #  bind_dn: "cn=Administrator,cn=users,dc=ent2k12,dc=domain,dc=com"
  #  con_type: ldaps
  #  srv_dns: "false"

  #oidc:
  #  client_id: xxxxxx
  #  issuer: https://xxxxxx.okta.com/
  #  user_in_idtoken: false
  #  domain: ""
  #  scopes: openid email profile groups
  #  claims:
  #    sub: sub
  #    email: email
  #    given_name: given_name
  #    family_name: family_name
  #    display_name: name
  #    groups: groups

  #github:
  #  client_id: d85d77c55a08c9bcbb15
  #  teams: TremoloSecurity/

  #saml:
  #  idp_url: "https://portal.apps.tremolo.io/idp-test/metadata/dfbe4040-cd32-470e-a9b6-809c8f857c40"



    

  network_policies:
    enabled: false
    ingress:
      enabled: false
      labels:
        kubernetes.io/metadata.name: ingress-nginx-internet
    monitoring:
      enabled: false
      labels:
        kubernetes.io/metadata.name: monitoring
    apiserver:
      enabled: false
      labels:
        kubernetes.io/metadata.name: kube-system

  services:
    enable_tokenrequest: false
    token_request_audience: api
    token_request_expiration_seconds: 600
    node_selectors: []
    
  openunison:
    replicas: 1
    non_secret_data:
      K8S_DB_SSO: oidc
      PROMETHEUS_SERVICE_ACCOUNT: system:serviceaccount:monitoring:prometheus-k8s

    secrets: []
    html:
      prefix: openunison
    enable_provisioning: false
