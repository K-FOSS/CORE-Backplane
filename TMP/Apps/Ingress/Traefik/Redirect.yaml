apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-backplane-ingress-redirect-core
  namespace: argocd
spec:
  generators:
    - list:
        elements:
          - cluster: k0s-cntrl
            url: https://k0s-dc1-kubernetes-default.service.dc1.kjdev:6443
  template:
    metadata:
      name: '{{cluster}}-ingress-redirect-core'
    spec:
      project: core
      syncPolicy:
        automated:
          selfHeal: true
      source:
        repoURL: https://helm.wyrihaximus.net/
        chart: redirect
        path: redirect
        targetRevision: 0.10.1
        helm:
          releaseName: ingress-redir
          values: |
            # Default values for .helm.
            # This is a YAML-formatted file.
            # Declare variables to be passed into your templates.

            # Redirect Application Configuration
            # Detailed description of all options: https://github.com/wyrihaximusnet/docker-redirect#configuration
            # All options has been filled out as an example with two of my own domains
            redirect:
            # The default fallback is use in case the application can't find a domain to redirect to within the other configuration options
              defaultFallbackTarget: http://repo.maven.apache.org
              enforceHttps: false
              buildin: wwwToNonWww
              hosts:
                central.maven.org: repo.maven.apache.org
              ingressHosts:
                - central.maven.org

            grafana:
              influxdb: false
              prometheus: false

            replicas: 2

            cron:
              replaceOldestPodWeekly: false

            hpa:
              enable: false
              maxReplicas: 1024

            # Available tags: https://github.com/wyrihaximusnet/docker-redirect#provided-tags
            image:
              repository: ghcr.io/wyrihaximusnet/redirect
              tag: random
              pullPolicy: Always

            serviceAccount:
              # Specifies whether a service account should be created
              create: true
              # The name of the service account to use.
              # If not set and create is true, a name is generated using the fullname template
              name:

            labels:
              language: random

            podSecurityContext: {}
              # fsGroup: 2000

            securityContext: {}
              # capabilities:
              #   drop:
              #   - ALL
              # readOnlyRootFilesystem: true
              # runAsNonRoot: true
              # runAsUser: 1000

            service:
              type: ClusterIP

            ingress:
              annotations:
                traefik.ingress.kubernetes.io/router.entrypoints: 'web'

            resources:
              # Setting this pretty low since this is a low resource intensive application, increase when needed
              limits:
                cpu: 50m
                memory: 64Mi
              requests:
                cpu: 50m
                memory: 64Mi


      destination:
        server: '{{url}}'
        namespace: core-prod
