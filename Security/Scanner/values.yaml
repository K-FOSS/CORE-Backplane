operator:
  # SPDX-FileCopyrightText: the secureCodeBox authors
  #
  # SPDX-License-Identifier: Apache-2.0

  # Default values for operator.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  # telemetryEnabled -- The Operator sends anonymous telemetry data, to give the team an overview how much the secureCodeBox is used. Find out more at https://www.securecodebox.io/telemetry
  telemetryEnabled: true

  # -- Define imagePullSecrets when a private registry is used (see: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
  imagePullSecrets: []

  image:
    # image.repository -- The operator image repository
    repository: docker.io/securecodebox/operator
    # image.tag -- Parser image tag
    # @default -- defaults to the charts version
    tag: null
    # -- Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    pullPolicy: IfNotPresent

  # -- Setup for Custom CA certificates. These are automatically mounted into every secureCodeBox component (lurker, parser & hooks).
  # Requires that every namespace has a configmap with the CA certificate(s)
  customCACertificate:
    # -- name of the configMap holding the ca certificate(s), needs to be the same across all namespaces
    existingCertificate: null
    # -- key in the configmap holding the certificate(s)
    certificate: "public.crt"

  serviceAccount:
    # -- Name of the serviceAccount the operator uses to talk to the k8s api
    name: securecodebox-operator
    # -- Annotations of the serviceAccount the operator uses to talk to the k8s api
    annotations: {}
    # -- Labels of the serviceAccount the operator uses to talk to the k8s api
    labels: {}

  # -- Sets the securityContext on the operators container level. See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  securityContext:
    # securityContext.runAsNonRoot -- Enforces that the Operator image is run as a non root user
    runAsNonRoot: true
    # securityContext.readOnlyRootFilesystem -- Prevents write access to the containers file system
    readOnlyRootFilesystem: true
    # securityContext.allowPrivilegeEscalation -- Ensure that users privileges cannot be escalated
    allowPrivilegeEscalation: false
    # securityContext.privileged -- Ensures that the operator container is not run in privileged mode
    privileged: false
    capabilities:
      drop:
        # securityContext.capabilities.drop[0] -- This drops all linux privileges from the operator container. They are not required
        - all

  # -- Sets the securityContext on the operators pod level. See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  podSecurityContext: {}

  lurker:
    image:
      # lurker.image.repository -- The operator image repository
      repository: docker.io/securecodebox/lurker
      # lurker.image.tag -- Parser image tag
      # @default -- defaults to the charts version
      tag: null
      # -- Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
      pullPolicy: IfNotPresent

  # -- Minio default config. More config options an info: https://github.com/minio/minio/blob/master/helm/minio/values.yaml
  minio:
    # -- Enable this to use minio as storage backend instead of a cloud bucket provider like AWS S3, Google Cloud Storage, DigitalOcean Spaces etc.
    enabled: false

  # Config for external s3 systems
  s3:
    # s3.enabled Enable this and disable minio if you want to directly connect against AWS S3, Google Cloud Storage, DigitalOcean Spaces etc.
    enabled: true
    endpoint: s3.mylogin.space
    bucket: core-security-scans

    # Name to a k8s secret in the same namespace as this release with credentials to the s3 bucket. Only used when s3.authType is set to "access-secret-key"
    # By default this assumes to have 'accesskey' and 'secretkey' as attributes
    # Example creation via kubectl:
    # kubectl create secret generic my-secret --from-literal=accesskey='******' --from-literal=secretkey='******' -n <namespace>
    keySecret: core-security-s3
    # Names to the attributes in the s3 secret
    secretAttributeNames:
      accesskey: AccessKey
      secretkey: SecretKey
    # s3.awsStsEndpoint -- STS Endpoint used in AWS IRSA Authentication. Change this to the sts endpoint of your aws region. Only used when s3.authType is set to "aws-irsa"
    awsStsEndpoint: "https://sts.amazonaws.com"

    # -- Go Template that generates the path used to store raw result file and findings.json file in the s3 bucket. Can be used to store the files in a subfolder of the s3 bucket
    # @default -- scan-{{ .Scan.UID }}/{{ .Filename }}
    urlTemplate: null
  # resources -- CPU/memory resource requests/limits (see: https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/, https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/)
  resources:
    limits:
      cpu: 100m
      memory: 30Mi
    requests:
      cpu: 100m
      memory: 20Mi
  # presignedUrlExpirationTimes -- Duration how long presigned urls are valid
  presignedUrlExpirationTimes:
    scanners: "12h"
    parsers: "1h"
    hooks: "1h"


defectdojo:
  enabled: true

  database: postgresql
  # Primary hostname of instance
  host: defectdojo.int.mylogin.space

  celery:
    broker: redis
    # To use an external celery broker, set the hostname here
    brokerHost: 'redis.mylogin.space'

  django:
    ingress:
      enabled: false

  initializer:
    run: false

  createSecret: false

  postgresql:
    enabled: false
    postgresServer: psql.mylogin.space
    auth:
      username: sys-scanner
      password: ""
      database: sys-scanner
      existingSecret: core-security-creds
      secretKeys:
        adminPasswordKey: password
        userPasswordKey: password
        replicationPasswordKey: postgresql-replication-password

  redis:
    enabled: false
    scheme: "redis"
    transportEncryption:
      enabled: true
      params: ''
    auth:
      existingSecret: core-security-creds
      existingSecretPasswordKey: password
    architecture: standalone
    # To use an external Redis instance, set enabled to false and uncomment
    # the line below:
    redisServer: 'redis.mylogin.space'

  # To add extra variables not predefined by helm config it is possible to define in extraConfigs block, e.g. below:
  # NOTE  Do not store any kind of sensitive information inside of it
  # extraConfigs:
  #   DD_SOCIAL_AUTH_AUTH0_OAUTH2_ENABLED: 'true'
  #   DD_SOCIAL_AUTH_AUTH0_KEY: 'dev'
  #   DD_SOCIAL_AUTH_AUTH0_DOMAIN: 'xxxxx'

  # Extra secrets can be created inside of extraSecrets block:
  # NOTE  This is just an exmaple, do not store sensitive data in plain text form, better inject it during the deployment/upgrade by --set extraSecrets.secret=someSecret
  # extraSecrets:
  #   DD_SOCIAL_AUTH_AUTH0_SECRET: 'xxx'
  extraConfigs:
    DD_SOCIAL_AUTH_AUTH0_OAUTH2_ENABLED: 'true'
    DD_SOCIAL_AUTH_AUTH0_KEY: 'dev'
    DD_SOCIAL_AUTH_AUTH0_DOMAIN: 'xxxxx'
    DD_SESSION_COOKIE_SECURE: 'True'
    DD_CSRF_COOKIE_SECURE: 'True'
    DD_SECURE_SSL_REDIRECT: 'True'
    DD_SOCIAL_AUTH_KEYCLOAK_OAUTH2_ENABLED: 'True'
    DD_SOCIAL_AUTH_KEYCLOAK_SECRET: '<your keycloak client credentials secret>'
    DD_SOCIAL_AUTH_KEYCLOAK_AUTHORIZATION_URL: '<your authorization endpoint>'
    DD_SOCIAL_AUTH_KEYCLOAK_ACCESS_TOKEN_URL: '<your token endpoint>'

  # To add code snippet which would extend setting functionality, you might add it here
  # It will be stored as ConfigMap and mounted `dojo/settings/local_settings.py`.
  # For more see: https://documentation.defectdojo.com/getting_started/configuration/
  # For example:
  # localsettingspy: |
  #   INSTALLED_APPS += (
  #     'debug_toolbar',
  #   )
  #   MIDDLEWARE = [
  #       'debug_toolbar.middleware.DebugToolbarMiddleware',
  #   ] + MIDDLEWARE