apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: metal-provision-job

  labels:
    implementation: mixed
    resolvemy.host/env: 'alpha'

  annotations:
    argocd.argoproj.io/sync-wave: '10'

spec:
  compositeTypeRef:
    apiVersion: resolvemy.host/v1alpha1
    kind: XMetalMachineInitJob

  writeConnectionSecretsToNamespace: core-prod
  mode: Pipeline
  pipeline:
    - step: get-bases
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          #
          # Obtain the existing hardware from HardwareRef
          # This is used to find the other relevant 
          #
          #
          - name: hardware-ref
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                providerConfigRef:
                  name: local-k8s

                managementPolicies:
                  - Observe

                forProvider:
                  manifest:
                    apiVersion: tinkerbell.org/v1alpha1
                    kind: Hardware
                    metadata:
                      # name in manifest is optional and defaults to Object name
                      name: youshouldneverseeme
                      namespace: replacemeduringruntime

            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.hardwareRef.name
                toFieldPath: spec.forProvider.manifest.metadata.name

              - type: FromCompositeFieldPath
                fromFieldPath: spec.hardwareRef.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace

              - fromFieldPath: status.atProvider.manifest.metadata.labels['v1alpha1.tinkerbell.org/ownerName']
                policy:
                  fromFieldPath: Required
                toFieldPath: status.share.objectName
                type: ToCompositeFieldPath

              - fromFieldPath: status.atProvider.manifest.spec.interfaces[0].netboot
                policy:
                  fromFieldPath: Required
                toFieldPath: status.share.sourceNetboot
                type: ToCompositeFieldPath

              - fromFieldPath: status.atProvider.manifest
                policy:
                  fromFieldPath: Required
                toFieldPath: status.share.hardwareManifest
                type: ToCompositeFieldPath

            #
            # TODO: Actually get this testing and doing things in the right order instead of rapid fire hitting APIs and recreating things
            #
            readinessChecks:
              - type: MatchCondition
                matchCondition:
                  type: Ready
                  status: 'True'

          #
          # Load the cluster into memory in order to find the child resources
          #
          - name: cluster-ref
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                providerConfigRef:
                  name: local-k8s

                managementPolicies:
                  - Observe

                forProvider:
                  manifest:
                    apiVersion: cluster.x-k8s.io/v1beta1
                    kind: Cluster
                    metadata:
                      # name in manifest is optional and defaults to Object name
                      name: youshouldneverseeme
                      namespace: replacemeduringruntime

            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.clusterRef.name
                toFieldPath: spec.forProvider.manifest.metadata.name

              - type: FromCompositeFieldPath
                fromFieldPath: spec.clusterRef.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace

            #
            # TODO: Actually get this testing and doing things in the right order instead of rapid fire hitting APIs and recreating things
            #
            readinessChecks:
              - type: MatchCondition
                matchCondition:
                  type: Ready
                  status: 'True'

          #
          #
          #
          - name: testing-ref
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                providerConfigRef:
                  name: local-k8s

                managementPolicies:
                  - Observe

                forProvider:
                  manifest:
                    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
                    kind: TinkerbellMachine
                    metadata:
                      # name in manifest is optional and defaults to Object name
                      name: youshouldneverseeme
                      namespace: replacemeduringruntime

            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: status.share.objectName
                toFieldPath: spec.forProvider.manifest.metadata.name

              - type: FromCompositeFieldPath
                fromFieldPath: spec.clusterRef.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace

            #
            # TODO: Actually get this testing and doing things in the right order instead of rapid fire hitting APIs and recreating things
            #
            readinessChecks:
              - type: MatchCondition
                matchCondition:
                  type: Ready
                  status: 'True'

          # - name: test-hw-ref
          #   base:
          #     apiVersion: kubernetes.crossplane.io/v1alpha1
          #     kind: ObservedObjectCollection
          #     spec:
          #       observeObjects:
          #         apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
          #         kind: TinkerbellMachine
          #         selector:
          #           matchLabels:
          #             cluster.x-k8s.io/cluster-name: replacedatruntime

          #       providerConfigRef:
          #         name: local-k8s

          #   patches:
          #     - type: FromCompositeFieldPath
          #       fromFieldPath: spec.clusterRef.name
          #       toFieldPath: spec.observeObjects.selector.matchLabels["cluster.x-k8s.io/cluster-name"]

          #   #
          #   # TODO: Actually get this testing and doing things in the right order instead of rapid fire hitting APIs and recreating things
          #   #
          #   readinessChecks:
          #     - type: MatchCondition
          #       matchCondition:
          #         type: Ready
          #         status: 'True'

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: function-auto-ready

    - step: ts-crossplane
      functionRef:
        name: ts-testing
      input:
        apiVersion: template.fn.crossplane.io/v1beta1
        kind: Input
        example: 'CluckerFucker'

    - step: sequence-creation
      functionRef:
        name: function-sequencer
      input:
        apiVersion: sequencer.fn.crossplane.io/v1beta1
        kind: Input
        rules:
          - sequence:
            - hardware-ref
            - testing-ref
        # - sequence:
        #   - first-resource
        #   - third-resource

    # - step: set-bootmode
    #   functionRef:
    #     name: function-patch-and-transform
    #   input:
    #     apiVersion: pt.fn.crossplane.io/v1beta1
    #     kind: Resources
    #     resources:
    #       - name: hardware-ref
    #         base:
    #           apiVersion: kubernetes.crossplane.io/v1alpha2
    #           kind: Object
    #           spec:
    #             providerConfigRef:
    #               name: local-k8s

    #             managementPolicies:
    #               - Observe
    #               - Update

    #             forProvider:
    #               manifest:
    #                 apiVersion: tinkerbell.org/v1alpha1
    #                 kind: Hardware
    #                 metadata:
    #                   # name in manifest is optional and defaults to Object name
    #                   name: youshouldneverseeme
    #                   namespace: replacemeduringruntime

    #         patches:
    #           - type: FromCompositeFieldPath
    #             fromFieldPath: spec.hardwareRef.name
    #             toFieldPath: spec.forProvider.manifest.metadata.name

    #           - type: FromCompositeFieldPath
    #             fromFieldPath: spec.hardwareRef.namespace
    #             toFieldPath: spec.forProvider.manifest.metadata.namespace

    #           - type: FromCompositeFieldPath
    #             fromFieldPath: status.share.hardwareManifest
    #             toFieldPath: spec.forProvider.manifest