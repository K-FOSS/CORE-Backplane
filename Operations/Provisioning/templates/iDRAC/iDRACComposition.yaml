apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: idrac

  labels:
    implementation: mixed

  annotations:
    argocd.argoproj.io/sync-wave: '10'

spec:
  compositeTypeRef:
    apiVersion: resolvemy.host/v1alpha1
    kind: XiDRAC

  writeConnectionSecretsToNamespace: core-prod
  
  resources:
    #
    # Create new certificate
    #


    - name: tls-cert
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: ''
                namespace: ''
              spec:
                dnsNames:
                  - test.idrac.resolvemy.host
                issuerRef:
                  group: cert-manager.io
                  kind: Issuer
                  name: ''
                privateKey:
                  algorithm: RSA
                  encoding: PKCS1
                  size: 4096
                secretName: tls-ca-certificate
                keystores:
                  pkcs12:
                    create: true
                    password: 'testing123'
                    profile: Modern2023
          providerConfigRef:
            name: local-k8s

      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.iDRAC.tls.automagic.issuerRef
          toFieldPath: spec.forProvider.manifest.spec.issuerRef

        - type: FromCompositeFieldPath
          fromFieldPath: spec.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace

        - type: FromCompositeFieldPath
          fromFieldPath: spec.iDRAC.networking.hostname
          toFieldPath: spec.forProvider.manifest.spec.commonName

        - type: FromCompositeFieldPath
          fromFieldPath: spec.iDRAC.networking.hostname
          toFieldPath: spec.forProvider.manifest.spec.dnsNames[0]


        #
        # Use IDs to auto generate the output secrets
        #
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.uid
          toFieldPath: spec.forProvider.manifest.spec.secretName
          transforms:
            - type: string
              string:
                type: Format
                fmt: '%s-tls-secret'


      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition

    #
    # Load TLS Certficiate from Kubernetes
    #
    - name: tls-ref
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha2
        kind: Object
        spec:
          providerConfigRef:
            name: local-k8s

          managementPolicies:
            - Observe

          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                # name in manifest is optional and defaults to Object name
                name: youshouldneverseeme
                namespace: replacemeduringruntime


      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.uid
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - type: string
              string:
                type: Format
                fmt: '%s-tls-secret'

        - type: FromCompositeFieldPath
          fromFieldPath: spec.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace

        #
        # Load TLS Certificate into shared
        #
        - fromFieldPath: status.atProvider.manifest.data['tls.crt']
          policy:
            fromFieldPath: Required
          toFieldPath: status.share.tls.cert
          type: ToCompositeFieldPath

        - fromFieldPath: status.atProvider.manifest.data['tls.key']
          policy:
            fromFieldPath: Required
          toFieldPath: status.share.tls.key
          type: ToCompositeFieldPath

      #
      # TODO: Actually get this testing and doing things in the right order instead of rapid fire hitting APIs and recreating things
      #
      readinessChecks:
        - type: MatchCondition
          matchCondition:
            type: Ready
            status: 'True'


    # #
    # # Obtain the existi
    - name: tf-base
      base:
        apiVersion: tf.upbound.io/v1beta1
        kind: Workspace
        spec:
          providerConfigRef:
            name: tf-provisioning

          writeConnectionSecretToRef:
            namespace: core-prod
            name: key1

          forProvider:
            source: Inline
            module: | # hcl
              variable "init" {
                description = "Wether or not to use default password"
                type  = bool
              }

              variable "certificate" {
                description = "TLS Certificate to use"
                type  = string
              }

              variable "credentials" {
                description = "Credentials used to access the iDRAC"

                type = object({
                  username = string
                  password = string
                })
              }

              variable "server" {
                description = "Credentials used to access the iDRAC"

                type =  map(object({
                  endpoint     = string
                  ssl_insecure = bool
                }))
              }
        
              locals {
                username = var.init == true ? "root" : var.credentials.username
                password =  var.init == true ? "calvin" : var.credentials.password
              }

              provider "redfish" {
                # # `redfish_servers` is used to align with enhancements to password management.
                # # Map of server BMCs with their alias keys and respective user credentials.
                # # This is required when resource/datasource's `redfish_alias` is not null
                redfish_servers  = var.server

                user = local.username
                password = local.password
              }

              resource "redfish_certificate" "cert" {
                for_each = var.server

                redfish_server {
                  # Alias name for server BMCs. The key in provider's `redfish_servers` map
                  # `redfish_alias` is used to align with enhancements to password management.
                  # When using redfish_alias, provider's `redfish_servers` is required.
                  redfish_alias = each.key

                  user         = local.username
                  password     = local.password
                  endpoint     = each.value.endpoint
                  ssl_insecure = each.value.ssl_insecure
                }

                /* Type of the certificate to be imported
                List of possible values: [CustomCertificate, Server]
                */
                certificate_type        = "CustomCertificate"
                passphrase              = "12345"
                ssl_certificate_content = data.local_file.cert.content
              }

              data "redfish_bios" "bios" {
                redfish_server {
                  redfish_alias = "default"
                }
              }

              output "bios_attributes" {
                value     = data.redfish_bios.bios
                sensitive = true
              }

            varmap:
              init: false
              certificate: 'test'
              ipAddress: 
              server:
                default:
                  endpoint: ''
                  ssl_insecure: true
              credentials:
                username: root
                password: calvin

      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.iDRAC.networking.ipAddress
          toFieldPath: spec.forProvider.varmap.server.default.endpoint
          transforms:
            - type: string
              string:
                type: Regexp
                regexp:
                  match: '^(([0-9]{1,3}\.){3}[0-9]{1,3})($|/\d+)$'
                  group: 1

            - type: string
              string:
                type: Format
                fmt: 'https://%s'

        - type: FromCompositeFieldPath
          fromFieldPath: spec.init
          toFieldPath: spec.forProvider.varmap.init

        #
        # Use IDs to auto generate the output secrets
        #
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.uid
          toFieldPath: 'spec.writeConnectionSecretToRef.name'
          transforms:
            - type: string
              string:
                type: Format
                fmt: '%s-tf-base-secret'


      #
      # TODO: Actually get this testing and doing things in the right order instead of rapid fire hitting APIs and recreating things
      #
      readinessChecks:
        - type: MatchCondition
          matchCondition:
            type: Ready
            status: 'True'
      