{{ range .Values.clusters }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .name }}

  labels:
    kubernetes.io/metadata.name: {{ .name }}

  annotations:
    argocd.argoproj.io/hook: PreSync

spec:
  finalizers:
  - kubernetes

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: open-cluster-management:managedcluster:{{ .name }}:work
  namespace: {{ .name }}
  labels:
    open-cluster-management.io/cluster-name: {{ .name }}
  finalizers:
  - cluster.open-cluster-management.io/manifest-work-cleanup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: open-cluster-management:managedcluster:work
subjects:
  # Bind the role with agent user group, the role will be as a common role for all agents
  # TODO: we will consider bind a specific role for each agent by agent name
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: system:open-cluster-management:{{ .name }}

---
apiVersion: cluster.open-cluster-management.io/v1
kind: ManagedCluster
metadata:
  labels:
    cluster.open-cluster-management.io/clusterset: default
  name: {{ .name }}

spec:
  hubAcceptsClient: true
  leaseDurationSeconds: 60
  managedClusterClientConfigs:
    - caBundle: <path:CORE0_SITE1/data/Ops/Clusters/Hubs/k0s-dc1/{{ .name }}#CA>
      url: {{ .apiHost }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: open-cluster-management:managedcluster:{{ .name }}
  labels:
    open-cluster-management.io/cluster-name: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: open-cluster-management:managedcluster:{{ .name }}
subjects:
- kind: Group
  apiGroup: rbac.authorization.k8s.io
  name: system:open-cluster-management:{{ .name }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: open-cluster-management:managedcluster:{{ .name }}
  labels:
    open-cluster-management.io/cluster-name: {{ .name }}
rules:
  # Allow agent to rotate its certificate
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - create
      - get
      - list
      - watch

  - apiGroups:
      - register.open-cluster-management.io

    resources:
      - managedclusters/clientcertificates
    verbs:
      - renew
  # Allow agent to get/list/update/watch its owner managed cluster
  - apiGroups:
      - cluster.open-cluster-management.io
    resources:
      - managedclusters
    resourceNames:
      - {{ .name }}
    verbs:
      - get
      - list
      - update
      - watch

  # Allow agent to update the status of its owner managed cluster
  - apiGroups:
      - cluster.open-cluster-management.io
    resources:
      - managedclusters/status
    resourceNames:
      - {{ .name }}
    verbs:
      - patch
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: open-cluster-management:managedcluster:{{ .name }}:registration
  namespace: {{ .name }}

  labels:
    open-cluster-management.io/cluster-name: {{ .name }}

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: open-cluster-management:managedcluster:registration
subjects:
  # Bind the role with spoke agent user group, the role will be as a common role for all spoke agents
  # TODO: we will consider bind a specific role for each spoke agent by spoke agent name
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: system:open-cluster-management:{{ .name }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .name }}-register

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .name }}-register

subjects:
  - kind: ServiceAccount
    name: {{ .name }}-register
roleRef:
  kind: ClusterRole
  name: open-cluster-management:managedcluster:{{ .name }}
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Secret
type: kubernetes.io/service-account-token
metadata:
 name: {{ .name }}-registration
 annotations:
   kubernetes.io/service-account.name: '{{ .name }}-register'
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster-spoke-{{ .name }}
  namespace: {{ .name }}

spec:
  refreshInterval: 5m
  secretStoreRefs:
    - name: mainvault-core
      kind: ClusterSecretStore

  selector:
    secret:
      name: {{ .name }}-registration

  template:
    data:
      kubeconfig: |
        clusters:
          - cluster:
              certificate-authority-data: {{`{{ index . "ca.crt" | b64enc }}`}}
              server: https://10.1.1.40:6443
            name: hub
        contexts:
        - context:
            cluster: hub
            namespace: default
            user: bootstrap
          name: bootstrap
        current-context: bootstrap
        preferences: {}
        users:
        - name: bootstrap
          user:
            token: {{`{{ .token }}`}}

  data:
    - match:
        secretKey: 'ca.crt'
        remoteRef:
          remoteKey: Ops/Clusters/Hubs/k0s-dc1/{{ .name }}
          property: CA
{{- end }}