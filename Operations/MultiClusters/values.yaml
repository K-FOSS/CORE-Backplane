clusterName: 'k0s-dc1'
clusterAddress: https://10.1.1.40:6443

clusters:
  - name: infra1-dc1
    apiHost: https://172.18.0.1:443
    caBundle: ''

  - name: k0s-dc1
    apiHost: https://10.1.1.40:6443
    caBundle: ''


clusterpedia:
  ## Default values for charts.
  ## This is a YAML-formatted file.
  ## Declare variables to be passed into your templates.

  ## @param global clusterpedia global config
  global:
    ## @param global.imageRegistry Global Docker image registry
    imageRegistry: ""
    ## E.g.
    ## imagePullSecrets:
    ##   - myRegistryKeySecretName
    imagePullSecrets: []
    ## @param global.postgresql.auth define the auth info.
    ## TODO Must set the global auth of postgresql to take effect.
    postgresql:
      ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
      ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
      ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
      ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
      ##
      auth:
        postgresPassword: "dangerous0"
        username: ""
        password: ""
        database: "clusterpedia"

  ## @param storageInstallMode "internal" and "external" are provided
  ## "internal" means automatic Database installation, default mysql
  ## "external" means to install the database yourself, must specify the database connection parameters
  storageInstallMode: "internal"
  ## @param installCRDs define flag whether to install or upgrade CRD resources
  ##
  installCRDs: true
  ## @param commonLabels Add labels to all the deployed resources (sub-charts are not considered). Evaluated as a template
  ##
  commonLabels: {}
  ## @param commonAnnotations Annotations to add to all deployed objects
  ##
  commonAnnotations: {}
  ## @param global.persistence.matchNode define the nodeAffinity of pv.
  ## if PV resources are not required, set it to None!
  ## if defined, will create the pv on the node.
  persistenceMatchNode: ""

  ## @param storageConfig StorageConfig for the apiserver and clustersynchro manger
  ##
  storageConfig:
    ## @param storageConfig.log Config of clusterpedia log
    log:
      ## @param storageConfig.log.enabled indicates whether enable log
      enabled: false
      ## @param storageConfig.log.stdout indicates whether it is standard output
      stdout: false
      ## @param level indicates the level of log
      ## Level must be one of [Silent, Error, Warn, Info], Default is 'Warn'
      level: Warn
      ## @param storageConfig.log.slowThreshold default 200ms
      slowThreshold: 100ms
      ## @param storageConfig.log.ignoreRecordNotFoundError indicates whether ignore error type `NotFound`
      ignoreRecordNotFoundError: false
      ## @param storageConfig.log.logger indicates the log rotate config
      logger:
        ## @param storageConfig.log.logger.filename indicates the file to write logs to
        filename: /var/log/clusterpedia/internalstorage.log
        ## @param storageConfig.log.logger.maxsize indicates the maximum size in megabytes of the log file before it gets
        ## rotated
        maxsize: 100
        ## @param storageConfig.log.logger.maxbackups indicates the maximum number of old log files to retain. Default 0
        ## is to retain all old log files
        maxbackups: 0
    ## @param storageConfig.connPool the connPoll config of storage
    connPool:
      ## @param storageConfig.connPool.maxIdleConns sets the maximum number of connections in the idle
      ## connection pool
      maxIdleConns: 5
      ## @param storageConfig.connPool.maxOpenConns sets the maximum number of open connections to the database
      maxOpenConns: 40
      ## @param storageConfig.connPool.connMaxLifetime sets the maximum amount of time a connection may be reused
      connMaxLifetime: 60m

  ## @param external define the auth param of external database
  ## if set the storageInstallMode to "external", the param must be set.
  externalStorage:
    ## @param externalStorage.type Select which database backend Clusterpedia will use. Can be 'postgres' or 'mysql'
    ##
    type: postgres
    ## @dsn externalStorage.type for storage dsn. If it is set, then the host, port, user, database parameters will be ignored
    ## It only works for mysql
    ##
    dsn: ""
    ## @param externalStorage.host for a custom host
    ##
    host: psql.mylogin.space
    ## @param externalStorage.port for a custom port
    ##
    port: 5432
    ## @param externalStorage.user Name for a custom user
    ##
    user: ""
    ## @param externalStorage.password Password for a custom password
    ##
    password: ""
    ## @param externalStorage.database Name for a custom database
    ##
    database: ""
    ## @param externalStorage.createDatabase whether to create the .Values.externalStorage.database or not
    ##
    createDatabase: false

  ## clusterpedia apiserver config
  apiserver:
    ## @param apiserver.labels
    labels: {}
    ## @param apiserver.replicaCount target replicas
    replicaCount: 1
    ## @param apiserver.podAnnotations
    podAnnotations: {}
    ## @param apiserver.podLabels
    podLabels: {}
    ## @param image.registry clusterpedia apiserver image registry
    ## @param image.repository clusterpedia apiserver image repository
    ## @param image.tag clusterpedia apiserver image tag (immutable tags are recommended)
    ## @param image.pullPolicy clusterpedia apiserver image pull policy
    ## @param image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: ghcr.io
      repository: clusterpedia-io/clusterpedia/apiserver

    ## @param featureGate to apiserver
    featureGates: {}
      ## Allow apiservers to show a count of remaining items in the response to a chunking list request.
      ## RemainingItemCount: false

      ## @param AllowRawSQLQuery is a feature gate for the apiserver to allow querying by the raw sql.
      ## owner: @cleverhu
      ## alpha: v0.3.0
      ## AllowRawSQLQuery: false

      ## @param APIServerTracing add support for distributed tracing in the API Server
      ## APIServerTracing: true

    ## @param apiserver.enableSHA1Cert specifies whether to allow SHA1 certificates for apiserver.
    enableSHA1Cert: false

    ## @param telemetry define flag whether to enable otel trace
    ##
    telemetry:
      tracing:
        endpoint: ""   # example "localhost:4317"
        samplingRatePerMillion: 0  # example 1000000, the number of samples to collect per million spans
        addOtelEnv: false

  ## clustersynchro manager config
  clustersynchroManager:
    ## @param clustersynchroManager.workerNumber set the number of workers
    workerNumber: 5
    ## @param clustersynchroManager.labels
    labels: {}
    ## @param clustersynchroManager.replicaCount target replicas
    replicaCount: 1
    ## @param clustersynchroManager.podAnnotations
    podAnnotations: {}
    ## @param clustersynchroManager.podLabels
    podLabels: {}
    ## @param image.registry clusterpedia clustersynchroManager image registry
    ## @param image.repository clusterpedia clustersynchroManager image repository
    ## @param image.tag clusterpedia clustersynchroManager image tag (immutable tags are recommended)
    ## @param image.pullPolicy clusterpedia clustersynchroManager image pull policy
    ## @param image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: ghcr.io
      repository: clusterpedia-io/clusterpedia/clustersynchro-manager

    ## @param clustersynchroManager.featureGate featureGate to clustersynchro
    featureGates: {}
      ## @param PruneManagedFields is a feature gate for ClusterSynchro to prune `ManagedFields` of the resource
      ## owner: @iceber
      ## alpha: v0.0.9
      ## beta: v0.3.0
      ## PruneManagedFields: true

      ## @param PruneLastAppliedConfiguration is a feature gate for the ClusterSynchro to prune `LastAppliedConfiguration` of the resource
      ## owner: @iceber
      ## alpha: v0.0.9
      ## beta: v0.3.0
      ## PruneLastAppliedConfiguration: true

      ## @param AllowSyncAllCustomResources is a feature gate for the ClusterSynchro to allow syncing of all custom resources
      ## owner: @iceber
      ## alpha: v0.3.0
      ## AllowSyncAllCustomResources: false

      ## @param AllowSyncAllResources is a feature gate for the ClusterSynchro to allow syncing of all resources
      ## owner: @iceber
      ## alpha: v0.3.0
      ## AllowSyncAllResources: false

      ## @param HealthCheckerWithStandaloneTCP is a feature gate for the cluster health checker to use standalone tcp
      ## owner: @iceber
      ## alpha: v0.6.0
      ## HealthCheckerWithStandaloneTCP: false

      ## @param IgnoreSyncLease is a feature gate for the ClusterSynchro to skip syncing leases.coordination.k8s.io,
      ## if you enable this feature, these resources will not be synced no matter what `syncResources` are defined.
      ## owner: @27149chen
      ## alpha: v0.8.0
      ## IgnoreSyncLease: false

    ## @param clustersynchroManager.leaderElect.leaseDuration the duration that non-leader candidates will wait after observing a leadership renewal
    ## @param clustersynchroManager.leaderElect.renewDeadline the interval between attempts by the acting master to renew a leadership slot before it stops leading
    ## @param clustersynchroManager.leaderElect.retryPeriod the duration the clients should wait between attempting acquisition and renewal of a leadership
    ## @param clustersynchroManager.leaderElect.resourceLock the type of resource object that is used for locking during leader election. Supported options are 'leases', 'endpointsleases' and 'configmapsleases'
    ##
    leaderElect:
      leaseDuration: "15s"
      renewDeadline: "10s"
      retryPeriod: "2s"
      resourceLock: "leases"
    kubeStateMetrics:
      enabled: false

  ## controller manager config
  controllerManager:
    ## @param controllerManager.labels
    labels: {}
    ## @param controllerManager.replicaCount target replicas
    replicaCount: 1
    ## @param controllerManager.podAnnotations
    podAnnotations: {}
    ## @param controllerManager.podLabels
    podLabels: {}
    ## @param image.registry clusterpedia controllerManager image registry
    ## @param image.repository clusterpedia controllerManager image repository
    ## @param image.tag clusterpedia controllerManager image tag (immutable tags are recommended)
    ## @param image.pullPolicy clusterpedia controllerManager image pull policy
    ## @param image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: ghcr.io
      repository: clusterpedia-io/clusterpedia/controller-manager

    ## @param featureGate to controller
    featureGates: {}
    ## @param disabled
    # disabled: true

  ## @section PostgreSQL Parameters
  ##
  ## PostgreSQL properties
  ##
  postgresql:
    ## @param postgresql.enabled Deploy the PostgreSQL sub-chart
    ##
    enabled: false

  hookJob:
    image:
      registry: ghcr.io
      repository: cloudtty/cloudshell
      tag: "v0.4.0"
      pullPolicy: IfNotPresent
