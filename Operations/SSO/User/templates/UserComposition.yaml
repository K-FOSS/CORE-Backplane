apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: sso-user
  labels:
    implementation: mixed
spec:
  compositeTypeRef:
    apiVersion: mylogin.space/v1alpha1
    kind: XUser

  writeConnectionSecretsToNamespace: core-prod

  resources:
    - name: user
      base:
        apiVersion: tf.upbound.io/v1beta1
        kind: Workspace
        spec:
          providerConfigRef:
            name: authentik

          writeConnectionSecretToRef:
            namespace: core-prod
            name: key1

          forProvider:
            source: Inline
            module: |
              resource "random_string" "username" {
                length  = 6
                special = false
                upper = false
              }

              resource "random_password" "password" {
                length  = 16
                lower   = true
                numeric = true
                upper   = true
                special = true
              }

              variable "name" {
                description = "Accounts friendly name"
                type        = string
              }

              variable "username" {
                description = "Accounts username"
                type        = string
                default     = random_string.username.result
              }

              variable "databaseName" {
                description = "Accounts Database"
                type        = string
                default     = random_string.username.result
              }

              variable "bucket" {
                description = "Accounts S3 Bucket"
                type        = string
                default     = random_string.username.result
              }

              variable "groups" {
                description = "The groups the account should be apart of"
                type        = set(string)
              }

              variable "buckets" {
                description = "The S3 Buckets the account should have access to"
                type        = set(string)
                default = [var.bucket]
              }

              variable "serviceAccount" {
                description = "If the account is a service account or not"
                type        = bool
                default     = true
              }

              data "authentik_group" "groups" {
                for_each = var.groups
                name     = each.key
              }

              locals {
                groups = [for group in data.authentik_group.groups : group.id]
              }

              resource "authentik_user" "name" {
                name = var.name
                username = var.username

                password = random_password.password.result

                groups = local.groups

                type = var.serviceAccount == true ? "service_account" : "internal"
              }

              output "username" {
                value     = var.username
                sensitive = false
              }

              output "database" {
                value     = var.databaseName
                sensitive = false
              }

              output "bucket" {
                value     = var.bucket
                sensitive = false
              }

              output "bucketPolicy" {
                value = jsonencode({
                  Version = "2012-10-17"
                  Statement = [
                    {
                      Effect = "Allow"
                      Action = [
                        "s3:*"
                      ],
                      Resource = [
                        flatten([
                          for bucket in var.buckets : [“arn:aws:s3:::${bucket}”, “arn:aws:s3:::${}”]
                        ])
                      ]
                    }
                  ]
                })
              }

              output "password" {
                value     = random_password.password.result
                sensitive = true
              }
            varmap:
              name: ''
              serviceAccount: true
              groups:
                - LDAPService
      patches:
        - fromFieldPath: spec.name
          toFieldPath: spec.forProvider.varmap.name

        - fromFieldPath: spec.username
          toFieldPath: spec.forProvider.varmap.username

        - fromFieldPath: spec.database.name
          toFieldPath: spec.forProvider.varmap.databaseName

        - fromFieldPath: spec.bucket.name
          toFieldPath: spec.forProvider.varmap.bucket

        - fromFieldPath: spec.serviceAccount
          toFieldPath: spec.forProvider.varmap.serviceAccount

        - fromFieldPath: spec.buckets
          toFieldPath: spec.forProvider.varmap.buckets

        - fromFieldPath: spec.groups
          toFieldPath: spec.forProvider.varmap.groups

        - fromFieldPath: metadata.uid
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms:
            - type: string
              string:
                fmt: '%s-secret'

        - type: ToCompositeFieldPath
          fromFieldPath: spec.writeConnectionSecretToRef.name
          toFieldPath: status.share.userSecret
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.atProvider.outputs.username
          policy:
            fromFieldPath: Required
          toFieldPath: status.share.username
          type: ToCompositeFieldPath

        - fromFieldPath: status.atProvider.outputs.database
          policy:
            fromFieldPath: Required
          toFieldPath: status.share.database
          type: ToCompositeFieldPath

        - fromFieldPath: status.atProvider.outputs.bucket
          policy:
            fromFieldPath: Required
          toFieldPath: status.share.bucket
          type: ToCompositeFieldPath

        - fromFieldPath: status.atProvider.outputs.bucketPolicy
          policy:
            fromFieldPath: Required
          toFieldPath: status.share.bucketPolicy
          type: ToCompositeFieldPath

      connectionDetails:
        - name: username
          fromConnectionSecretKey: username

        - name: password
          fromConnectionSecretKey: password

        - name: database
          fromConnectionSecretKey: database

        - name: bucket
          fromConnectionSecretKey: bucket

    - name: role
      patches:
        - fromFieldPath: status.share.userSecret
          toFieldPath: spec.forProvider.passwordSecretRef.name
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.share.username
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required
      base:
        apiVersion: postgresql.sql.crossplane.io/v1alpha1
        kind: Role
        spec:
          providerConfigRef:
            name: psql-main

          forProvider:
            passwordSecretRef:
              name: password
              namespace: core-prod
              key: password

            privileges:
              login: true

    - name: database
      patches:
        - fromFieldPath: status.share.database
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.share.username
          toFieldPath: spec.forProvider.owner
          policy:
            fromFieldPath: Required
      base:
        apiVersion: postgresql.sql.crossplane.io/v1alpha1
        kind: Database
        spec:
          providerConfigRef:
            name: psql-main

          forProvider:
            connectionLimit: -1


    - name: bucket
      patches:
        - fromFieldPath: status.share.bucket
          toFieldPath: spec.name
          policy:
            fromFieldPath: Required

      base:
        apiVersion: s3.onyxia.sh/v1alpha1
        kind: Bucket
        spec:
          name: test-bucket

    - name: bucket-policy
      patches:
        - fromFieldPath: status.share.username
          toFieldPath: spec.name
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.share.bucketPolicy
          toFieldPath: spec.policyContent
          policy:
            fromFieldPath: Required
      base:
        apiVersion: s3.onyxia.sh/v1alpha1
        kind: Policy
        spec:
          name: test-bucket
