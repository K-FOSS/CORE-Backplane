apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-backplane-network-infra-istio-tcpgateway-helm
  namespace: argocd
spec:
  generators:
    - list:
        elements:
          - cluster: k0s-cntrl
            url: https://k0s-dc1-kubernetes-default.service.dc1.kjdev:6443

  template:
    metadata:
      name: '{{cluster}}-istio-tcpgateway-helm'
    spec:
      project: core
      syncPolicy:
        automated:
          selfHeal: true

      source:
        repoURL: https://istio-release.storage.googleapis.com/charts
        chart: gateway
        path: gateway
        targetRevision: 1.13.1
        helm:
          releaseName: istio-ingressgateway
          values: |
            # Name allows overriding the release name. Generally this should not be set
            name: ""
            # revision declares which revision this gateway is a part of
            revision: ""

            replicaCount: 3

            rbac:
              # If enabled, roles will be created to enable accessing certificates from Gateways. This is not needed
              # when using http://gateway-api.org/.
              enabled: true

            serviceAccount:
              # If set, a service account will be created. Otherwise, the default is used
              create: true
              # Annotations to add to the service account
              annotations: {}
              # The name of the service account to use.
              # If not set, the release name is used
              name: ""

            # Define the security context for the pod.
            # If unset, this will be automatically set to the minimum privileges required to bind to port 80 and 443.
            # On Kubernetes 1.22+, this only requires the `net.ipv4.ip_unprivileged_port_start` sysctl.
            securityContext: ~
            containerSecurityContext: ~

            service:
              # Type of service. Set to "None" to disable the service entirely
              type: LoadBalancer
              externalTrafficPolicy: Local
              annotations:
                metallb.universe.tf/allow-shared-ip: istio-tcp
              ports:
              - name: status-port
                port: 15021
                protocol: TCP
                targetPort: 15021

              - name: minecraft
                port: 25565
                protocol: TCP
                appProtocol: minecraft
                targetPort: 25565

              - name: http
                port: 80
                protocol: TCP
                appProtocol: http
                targetPort: 80

              - name: postgresql
                port: 5432
                protocol: TCP
                appProtocol: postgresql
                targetPort: 5432

              - name: redis
                port: 6379
                protocol: TCP
                appProtocol: redis
                targetPort: 6379

              - name: dns-tcp
                port: 53
                protocol: TCP
                appProtocol: domain
                targetPort: 53

              - name: tls-turn
                port: 3478
                appProtocol: turn
                protocol: TCP
                targetPort: 3478
              loadBalancerIP: 10.1.1.32
              loadBalancerSourceRanges: []

            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 2000m
                memory: 1024Mi

            podAnnotations:
              prometheus.io/port: "15020"
              prometheus.io/scrape: "true"
              prometheus.io/path: "/stats/prometheus"
              inject.istio.io/templates: "gateway"
              sidecar.istio.io/inject: "true"
              sidecar.istio.io/logLevel: error

            autoscaling:
              enabled: false
              minReplicas: 1
              maxReplicas: 5
              targetCPUUtilizationPercentage: 80

            # Pod environment variables
            env: {}

            # Labels to apply to all resources
            labels: {}

            # Annotations to apply to all resources
            annotations: {}

            nodeSelector: {}

            tolerations: []

            affinity: {}

            # If specified, the gateway will act as a network gateway for the given network.
            networkGateway: ""

            imagePullSecrets: []

      destination:
        server: '{{url}}'
        namespace: core-prod
