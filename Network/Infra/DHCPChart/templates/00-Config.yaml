apiVersion: v1
kind: ConfigMap
metadata:
  name: '{{ template "dhcp.fullname" . }}-dhcp-tpl-config'
  labels:
    app.kubernetes.io/name: {{ include "dhcp.name" . }}
    helm.sh/chart: {{ include "dhcp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  KeaCA.jsonc: |
    {{`
      {
        // This is a basic configuration for the Kea Control Agent.
        // RESTful interface to be available at http://0.0.0.0:8000/
        "Control-agent": {
          "http-host": "0.0.0.0",
          "http-port": 8000,
          // Control sockets to Kea daemons.
          "control-sockets": {
            // This is how the Agent can communicate with the DHCPv4 server.
            "dhcp4": {
              "comment": "socket to DHCP4 server",
              "socket-type": "unix",
              "socket-name": "/var/run/DHCP/kea4-ctrl-socket"
            },
            // Location of the D2 command channel socket.
            "d2": {
              "socket-type": "unix",
              "socket-name": "/var/run/DHCP/kea-ddns-ctrl-socket"
            }
          },
          // Specify hooks libraries that are attached to the Control Agent.
          // Such hooks libraries should support 'control_command_receive'
          // hook point. This is currently commented out because it has to
          // point to the existing hooks library. Otherwise the Control
          // Agent will fail to start.
          "hooks-libraries": [],
          // Logging configuration starts here. Kea uses different loggers to log various
          // activities. For details (e.g. names of loggers), see Chapter 18.
          "loggers": [
            {
              // This specifies the logging for Control Agent daemon.
              "name": "kea-ctrl-agent",
              "output_options": [
                {
                  // Specifies the output file. There are several special values
                  // supported:
                  // - stdout (prints on standard output)
                  // - stderr (prints on standard error)
                  // - syslog (logs to syslog)
                  // - syslog:name (logs to syslog using specified name)
                  // Any other value is considered a name of a time
                  "output": "stdout",
                  // Shorter log pattern suitable for use with systemd,
                  // avoids redundant information
                  "pattern": "%-5p %m\n"
                  // This governs whether the log output is flushed to disk after
                  // every write.
                  // "flush": false,
                  // This specifies the maximum size of the file before it is
                  // rotated.
                  // "maxsize": 1048576,
                  // This specifies the maximum number of rotated files to keep.
                  // "maxver": 8
                }
              ],
              // This specifies the severity of log messages to keep. Supported values
              // are: FATAL, ERROR, WARN, INFO, DEBUG
              "severity": "WARN"
            }
          ]
        }
      }

    `}}
  NetConf.jsonc: |
    {{`
      {
        "Netconf": {
          // Three flags control netconf (default values are true):
          // - "boot-update" about the YANG configuration load when
          //   netconf boots.
          // - "subscribe-changes" about the subscription to notifications
          //   when the running YANG module is changed.
          // - "validate-changes" allows to validate changes or not.
          "boot-update": true,
          "subscribe-changes": true,
          "validate-changes": true,
          // This map specifies how each server is managed:
          // the YANG model to use and the control channel.
          "managed-servers": {
            // This is how Netconf can communicate with the DHCPv4 server.
            "dhcp4": {
              // Eventually, the kea-netconf will be able to handle multiple
              // models. However, for the time being the only choice for
              // DHCPv4 server is kea-dhcp4-server model.
              "model": "kea-dhcp4-server",
              // The three control flags can be defined in this scope too
              // and takes precedence over global and default values.
              // boot-update determines whether the initial configuration
              // should be retrieved from netconf during kea-netconf startup.
              // You almost always want to set this to yes.
              "boot-update": true,
              // This flag control whether the kea-netconf daemon should
              // subscribe to any changes. If set to true, kea-netconf will
              // monitor sysrepo and will pick up any changes that may be
              // introduced, either using netconf clients or sysrepocfg.
              "subscribe-changes": true,
              // This parameters specifies whether kea-netconf will attempt
              // to verify if the upcoming NETCONF configuration is sane. The
              // verification is done by calling config-test. Depending on
              // Kea response, the new configuration is accepted or rejected.
              "validate-changes": false,
              // Currently three control channel types are supported:
              // - "stdout" which output the configuration on the standard
              //   output (this is mainly for testing purposes, but you can
              //   use simple script (such as curl or socat) to pass that
              //   information to the server.
              // - "unix" which uses the local control channel supported by
              //   "dhcp4" and "dhcp6" servers ("d2" support is coming in Kea 1.5)
              // - "http" which uses the Control Agent (CA) to manage itself or
              //   to forward commands to "dhcp4" or "dhcp6".
              "control-socket": {
                "socket-type": "unix",
                "socket-name": "/var/run/DHCP/kea4-ctrl-socket"
              },
              // Comment is optional. You can put some notes here.
              "comment": "Kea DHCP4 server serving network on floor 13"
            }
          },
          // Netconf is able to load hook libraries that augment its operation.
          // The primary functionality is the ability to add new commands.
          //
          // Uncomment this section to load a hook library.
          //
          // "hooks-libraries": [
          //    // Hook libraries list may contain more than one library.
          //    {
          //        // The only necessary parameter is the library filename.
          //        "library": "/opt/local/netconf-commands.so",
          //
          //        // Some libraries may support parameters. Make sure you
          //        // type this section carefully, as the CA does not validate
          //        // it (because the format is library specific).
          //        "parameters": {
          //            "param1": "foo"
          //        }
          //    }
          //]
          // Similar to other Kea components, Netconf also uses logging.
          "loggers": [
            {
              "name": "kea-netconf",
              "output_options": [
                {
                  //"output": "/var/log/kea-netconf.log",
                  "output": "stdout",
                  // Several additional parameters are possible in addition
                  // to the typical output. Flush determines whether logger
                  // flushes output to a file. Maxsize determines maximum
                  // filesize before the file is being rotated. maxver
                  // specifies the maximum number of rotated files being
                  // kept.
                  "flush": true,
                  "maxsize": 204800,
                  "maxver": 4,
                  // We use pattern to specify custom log message layout
                  "pattern": "%d{%y.%m.%d %H:%M:%S.%q} %-5p [%c/%i] %m\n"
                }
              ],
              // You can change the severity to DEBUG, INFO, WARN, ERROR or
              // CRIT. For DEBUG level, you can also additionally specify
              // debuglevel (0-99, higher = more verbose). All configurations
              // are logged on DEBUG/55.
              "severity": "INFO",
              "debuglevel": 0
            }
          ]
        }
      }

  
    `}}

  DDNS.jsonc: |
    {{`
      {
        // Kea DHCP-DDNS server configuration begins here.
        "DhcpDdns": {
          // Global Parameters
          // IP address D2 will listen for update requests at.
          // Default is 127.0.0.1
          "ip-address": "127.0.0.1",
          // Port D2 will listen for update requests on.
          // Default is 53001.
          "port": 53001,
          // Maximum time to we will wait for a DNS server to respond to us.
          // Unit is the millisecond, default is 100ms.
          "dns-server-timeout": 12000,
          // Protocol to use for Name Change Requests from a Kea DHCP server.
          // Currently only 'UDP' is supported.
          "ncr-protocol": "UDP",
          // Format to use for Name Change Requests from a Kea DHCP server.
          // Currently only 'JSON' is supported.
          "ncr-format": "JSON",
          // Command control socket configuration parameters for Kea DHCP-DDNS server.
          "control-socket": {
            // Location of the unix domain socket file the DHCP-DDNS server uses
            // to receive control commands from the Kea Control Agent or the
            // local server administrator.
            "socket-name": "/var/run/DHCP/kea-ddns-ctrl-socket",
            // Control socket type used by the Kea DHCP-DDNS server.
            // The 'unix' socket is currently the only supported type.
            "socket-type": "unix"
          },
          // List of hooks libraries and their specific configuration parameters
          // to be loaded by Kea DHCP-DDNS server.
          "hooks-libraries": [],
          // Forward DDNS (Dynamic DNS).
          "forward-ddns": {
            // List of DDNS domains.
            "ddns-domains": [
              {
                // Name of the zone (required).
                "name": "kristianjones.dev.",
                // List of DNS servers where to send DNS updates.
                "dns-servers": [
                  {
                    "ip-address": "10.1.1.150",
                    "port": 53
                  }
                ]
              }
            ]
          },
          // Reverse DDNS (Dynamic DNS).
          "reverse-ddns": {
            // List of DDNS domains.
            "ddns-domains": [
              {
                // Name of the zone (required).
                "name": "in-addr.arpa.",
                // List of DNS servers where to send DNS updates.
                "dns-servers": [
                  {
                    "ip-address": "10.1.1.150",
                    "port": 53
                  }
                ]
              },
              {
                // Name of the zone (required).
                "name": "241.31.172.in-addr.arpa.",
                // List of DNS servers where to send DNS updates.
                "dns-servers": [
                  {
                    "ip-address": "10.1.1.150",
                    "port": 53
                  }
                ]
              }
            ]
          },
          // List of TSIG keys used to protect DNS updates.
          "tsig-keys": [],
          // List of loggers used by the servers using this configuration file.
          "loggers": [
            {
              // Name of the logger.
              "name": "kea-dhcp-ddns",
              // Configures how the log should be output.
              "output_options": [
                {
                  // Specifies logging destination.
                  "output": "stdout",
                  // Specifies log entry content
                  "pattern": "%D{%Y-%m-%d %H:%M:%S.%q} %-5p [%c/%i] %m\n"
                }
              ],
              "severity": "DEBUG",
              "debuglevel": 99
            }
          ]
        }
      }

    `}}

  DHCP6.jsonc: |
    {{`
      {
        "Dhcp6": {
          // Kea is told to listen on ethX network interface only.
          "interfaces-config": {
            "interfaces": [
              "*"
            ],
            "dhcp-socket-type": "udp",
            "outbound-interface": "use-routing",
            // This makes interfaces to be re-detected at each (re-)configuration.
            // By default it is true.
            "re-detect": false
          },
          // This defines a control socket. If defined, Kea will open a UNIX socket
          // and will listen for incoming commands. See section 15 of the Kea User's
          // Guide for list of supported commands.
          "control-socket": {
            "socket-type": "unix",
            "socket-name": "/var/run/DHCP/kea6-ctrl-socket"
          },
          // We need to specify the database used to store leases. As of
          // September 2016, four database backends are supported: MySQL,
          // PostgreSQL, Cassandra, and the in-memory database, Memfile.
          // We will use memfile  because it doesn't require any prior set up.
          "lease-database": {
            "type": "postgresql",
            "name": "{{ .DatabaseDatabase }}",
            "host": "psql.service.dc1.kjdev",
            "user": "{{ .Username }}",
            "port": 5432,
            "password": "{{ .Password }}",
            "reconnect-wait-time": 3000, // expressed in ms
            "max-reconnect-tries": 3,
            "on-fail": "stop-retry-exit",
            "connect-timeout": 3
          },
          "sanity-checks": {
            // This parameter determines what to do when a new lease appears in the
            // system (i.e. either is read from disk during memfile startup or is
            // added via lease commands). There are five modes supported:
            // none - do nothing, accept them as is
            // warn - if subnet-id problems are detected, print a warning, but
            //        otherwise load the lease as is. This is the default value.
            // fix - attempt to fix the lease by finding appropriate subnet-id value.
            //       if there is no suitable subnet, the lease is loaded as is.
            // fix-del - attempt to fix the lease by finding appropriate subnet-id
            //           value. If there is no suitable subnet, the lease is deleted.
            // del - delete leases that have incorrect subnet-id values.
            "lease-checks": "fix-del"
          },
          // Kea 0.9.1 introduced MAC/hardware addresses support in DHCPv6. There is
          // no single reliable method of getting MAC address information in DHCPv6.
          // Kea supports several methods. Depending on your network set up, some
          // methods may be more preferable than others, hence the configuration
          // parameter. 'mac-sources' is a list of methods. Allowed parameters are:
          // any, raw, duid, ipv6-link-local, client-link-addr-option, rfc6939 (which
          // is an alias for client-link-addr-option), remote-id, rfc4649 (which is an
          // alias for remote-id, subscriber-id, rfc4580 (which is an alias for
          // subscriber-id) and docsis.
          //
          // Note that the order matters. Methods are attempted one by one in the
          // order specified until hardware address is obtained. If you don't care
          // which method is used, using 'any' is marginally faster than enumerating
          // them all.
          //
          // If mac-sources are not specified, a default value of 'any' is used.
          "mac-sources": [
            "client-link-addr-option",
            "duid",
            "ipv6-link-local"
          ],
          // RFC6422 defines a mechanism called relay-supplied options option. The
          // relay agent may insert certain options that the server will echo back to
          // the client, if certain criteria are met. One condition is that the option
          // must be RSOO-enabled (i.e. allowed to be echoed back). IANA maintains a
          // list of those options here:
          // http://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml#options-relay-supplied
          // However, it is possible to allow the server to echo back additional
          // options.  This entry marks options 110, 120 and 130 as RSOO-enabled.
          "relay-supplied-options": [
            "110",
            "120",
            "130"
          ],
          // Addresses will be assigned with preferred and valid lifetimes
          // being 3000 and 4000, respectively. Client is told to start
          // renewing after 1000 seconds. If the server does not respond
          // after 2000 seconds since the lease was granted, client is supposed
          // to start REBIND procedure (emergency renewal that allows switching
          // to a different server).
          "preferred-lifetime": 3000,
          "valid-lifetime": 4000,
          "renew-timer": 1000,
          "rebind-timer": 2000,
          // The following list defines subnets. Each subnet consists of at
          // least subnet and pool entries. Note the user-context being
          // used throughout the definitions. This is something that is not
          // being used by Kea, it's simply parsed and stored in appropriate
          // structures. You can put anything you want in the user-context
          // as long as it is a valid JSON and it starts with a map (i.e.
          // is enclosed by curly brackets).
          // A comment entry is translated into a user-context with a
          // "comment" property so you can include comments inside the
          // configuration itself.
          "subnet6": [
            {
              "pools": [
                {
                  "pool": "2001:db8:1::/80",
                  // This is user context specified for this particular
                  // pool. You can use it to describe the pool in some way.
                  // Just keep in mind that the structure will not be used
                  // by Kea itself. It will be made available to hooks if
                  // they want to use it.
                  "user-context": {
                    "department": "engineering"
                  }
                }
              ],
              // Here's the user-context for the whole subnet.
              "user-context": {
                "comment": "Floor one, west wing"
              },
              // Equivalent using smart parser
              // "comment": "Floor one, west wing",
              // This defines PD (prefix delegation) pools. In this case
              // we have only one pool. That consists of /64 prefixes
              // being delegated out of large /48 pool. Each delegated
              // prefix will contain an excluded-prefix option.
              "pd-pools": [
                {
                  "prefix": "2001:db8:abcd::",
                  "prefix-len": 48,
                  "delegated-len": 64,
                  "excluded-prefix": "2001:db8:abcd:1234::",
                  "excluded-prefix-len": 72,
                  // Another user-context for this PD pool. Again, you can put
                  // anything you want in there as long as it's valid JSON and
                  // starts with a map.
                  "user-context": {
                    "purpose": "For CPE devices"
                  }
                }
              ], // end of pools
              "subnet": "2001:db8:1::/64",
              "interface": "ethX",
              // Sometimes the relay may use an odd IPv6 address that's not matching
              // the subnet. This is discouraged, but there are valid cases when it
              // makes sense. One case is when the relay has only link-local address
              // and another is when there is a shared subnet scenario.
              "relay": {
                "ip-address": "3000::1"
              }
            }
          ],
          // The following configures logging. It assumes that messages with at
          // least informational level (info, warn, error and fatal) should be
          // logged to stdout.
          "loggers": [
            {
              "name": "kea-dhcp6",
              "output_options": [
                {
                  "output": "stdout",
                  // Several additional parameters are possible in addition
                  // to the typical output. Flush determines whether logger
                  // flushes output to a file. Maxsize determines maximum
                  // filesize before the file is being rotated. maxver
                  // specifies the maximum number of rotated files being
                  // kept.
                  "flush": true,
                  "maxsize": 204800,
                  "maxver": 4,
                  // We use pattern to specify custom log message layout
                  "pattern": "%d{%y.%m.%d %H:%M:%S.%q} %-5p [%c/%i] %m\n"
                }
              ],
              "debuglevel": 0,
              "severity": "INFO"
            }
          ]
        }
      }
    `}}

  DHCP4.jsonc: |
    {{`
      {
        "Dhcp4": {
          "authoritative": false,
          // Global bootfile name to be set in the 'file' field.
          "boot-file-name": "/dev/null",
          "client-classes": [
            {
              "name": "ubnt",
              "test": "substring(option[60].hex,0,4) == 'ubnt'",
              "option-def": [
                {
                  "name": "vendor-encapsulated-options",
                  "type": "empty",
                  "encapsulate": "ubnt",
                  "code": 43
                }
              ],
              "option-data": [
                {
                  "name": "unifi-address",
                  "space": "ubnt",
                  "data": "10.1.1.83"
                },
                {
                  "name": "vendor-encapsulated-options"
                }
              ]
            },
            {
              "name": "vmhost-class1",
              "next-server": "172.16.0.151",
              "option-data": []
            },
            {
              "name": "onie",
              "test": "substring(option[60].hex,0,11) == 'onie_vendor'",
              "option-data": [
                {
                  // In "option-data" list we have to configure option 125 with data parameter equal
                  // to vendor-id we are expecting, also it will tell Kea which vendor space
                  // encapsulate in suboptions.
                  "data": "42623",
                  "name": "vivso-suboptions"
                }
              ]
            }
          ],
          "control-socket": {
            // Location of the unix domain socket file the DHCPv4 server uses
            // to receive control commands from the Kea Control Agent or the
            // local server administrator.
            "socket-name": "/var/run/DHCP/kea4-ctrl-socket",
            // Control socket type used by the Kea DHCPv4 server. The 'unix'
            // socket is currently the only supported type.
            "socket-type": "unix"
          },
          // Boolean flag indicating that server should ignore DHCP client
          // wishes to update DNS on its own. With that flag set to true
          // the server will send DNS updates for both forward and
          // reverse DNS data. The default value is false, which indicates
          // that the server will delegate DNS update to the client when
          // requested. It may be specified at the global, shared-network
          // and subnet levels.
          "ddns-override-client-update": true,
          // Boolean flag indicating that the server should override DHCP
          // client's wish to not update the DNS. With this parameter
          // set to true the server will send DNS update even when
          // the client requested no update.  It may be specified at the
          // global, shared-network and subnet levels.
          "ddns-override-no-update": true,
          // Suffix appended to the partial name sent to the DNS. The
          // default value is an empty string which indicates that no
          // suffix is appended.  It may be specified at the global,
          // shared-network and subnet levels.
          "ddns-qualifying-suffix": "kristianjones.dev.",
          // Enumeration specifying whether the server should honor
          // hostname or Client FQDN sent by the client or replace
          // this name. The acceptable values are: "never" (use the
          // name the client sent), "always" (replace the name the
          // client sent), "when-present" (replace the name the client
          // sent, but do not generate one when the client didn't sent
          // the name), "when-not-present" (generate the name when
          // client didn't send one, otherwise leave the name the
          // client sent). The default value is "never".  It may be
          // specified at the global, shared-network and subnet levels.
          "ddns-replace-client-name": "when-not-present",
          // Boolean flag which enables or disables the DDNS updating. It
          // defaults to true.  It may be specified at the global, shared-
          // network and subnet levels. It works in conjunction with
          // dhcp-ddns:enable-updates which must be true to enable connectivity
          // to kea-dhcp-ddns.
          "ddns-send-updates": true,
          // Boolean flag, which when true instructs the server to always
          // update DNS when leases are renewed, even if the DNS information
          // has not changed.  The server's default behavior (i.e. flag is false)
          // is to only update DNS if the DNS information has changed.  It
          // may be specified at the global, shared-network and subnet levels.
          "ddns-update-on-renew": true,
          // Boolean flag, which is passed to kea-dhcp-ddns with each DDNS
          // update request to indicate whether or not DNS update conflict
          // resolution as described in RFC 4703 should be employed for the
          // given update request.  The default value for this flag is true.
          // It may be specified at the global, shared-network and subnet levels.
          "ddns-use-conflict-resolution": true,
          // Time in seconds specifying how long a declined lease should be
          // excluded from DHCP assignments. The default value is 24 hours.
          "decline-probation-period": 86400,
          // Name Change Requests forwarding configuration for Kea DHCPv4 server.
          // NCRs are sent to Kea D2 module to update DNS upon allocation of the
          // DHCP leases.
          "dhcp-ddns": {
            // Boolean flag indicating if Kea DHCPv4 server should connect to
            // kea-dhcp-ddns.  This must be true for NCRs to be created and
            // sent to kea-dhcp-ddns. By default NCRs are not generated.
            "enable-updates": true,
            // Specifies maximum number of NCRs to queue waiting to be sent
            // to Kea D2 server.
            "max-queue-size": 1024,
            // Packet format to use when sending NCRs to Kea D2 server.
            // Currently, only JSON format is supported.
            "ncr-format": "JSON",
            // Socket protocol to use when sending NCRs to D2. Currently,
            // only UDP is supported.
            "ncr-protocol": "UDP",
            // IP address that Kea DHCPv4 server should use to send
            // NCRs to D2. Default value of zero indicates that Kea
            // should pick suitable address.
            "sender-ip": "127.0.0.1",
            // Port number that Kea DHCPv4 server should use to send
            // NCRs to D2. Default value of zero indicates that Kea
            // should pick suitable port.
            "sender-port": 0,
            // IP address on which D2 listens for NCRs.
            "server-ip": "127.0.0.1",
            // Port number on which D2 listens for NCRs.
            "server-port": 53001
          },
          // Boolean flag indicating whether or not the Kea DHCPv4 server
          // should send back Client Identifier option in its responses.
          // The default value is true which indicates that the option
          // must be sent back if the client included it. The false
          // value instructs the server to not send this option for
          // backward compatibility with older DHCP specifications which
          // stated that Client Identifier must not be sent back.
          "echo-client-id": true,
          // Collection of Kea DHCPv4 server parameters configuring how
          // the server should process expired DHCP leases.
          "expired-leases-processing": {
            // Specifies the number of seconds since last removal of
            // the expired leases when next removal should occur.
            "flush-reclaimed-timer-wait-time": 25,
            // Specifies the time period in seconds to keep expired
            // leases in the lease database (lease affinity).
            "hold-reclaimed-time": 3600,
            // Specifies the maximum number of expired leases that can be
            // processed in a single attempt to clean up the lease
            // database from the expired leases. If there are more
            // expired leases, they will be processed during the next
            // cleanup attempt.
            "max-reclaim-leases": 100,
            // Specifies the maximum time in milliseconds that the single
            // attempt to cleanup the lease database from the expired
            // leases may take.
            "max-reclaim-time": 250,
            // Specifies the time period in seconds since last attempt
            // to process expired leases to initiate the next attempt.
            "reclaim-timer-wait-time": 10,
            // Specifies the maximum number of expired leases processing
            // cycles which didn't result in full cleanup of the lease
            // database from the expired leases, after which a
            // warning message is issued.
            "unwarned-reclaim-cycles": 5
          },
          "hooks-libraries": [
            {
              "library": "/usr/lib/kea/hooks/libdhcp_lease_cmds.so",
              "parameters": {}
            },
            {
              "library": "/usr/lib/kea/hooks/libdhcp_stat_cmds.so",
              "parameters": {}
            }
          ],
          // List of access credentials to external sources of IPv4 reservations,
          "hosts-databases": [],
          // List of host reservation identifier types to be used by the
          // Kea DHCPv4 server to fetch static reservations for the
          // DHCP clients. All identifiers are used by default, which
          // means that the server will issue multiple queries to the
          // database to find if there is a reservation for the particular
          // client. If the particular deployment uses only subset, e.g.
          // one, identifier type, this identifier should be only listed
          // here to prevent unnecessary queries to the database.
          "host-reservation-identifiers": [
            "hw-address",
            "duid",
            "circuit-id",
            "client-id",
            "flex-id"
          ],
          // As with any other configuration, you need to tell Kea the interface
          // names, so it would listen to incoming traffic.
          "interfaces-config": {
            "interfaces": [
              "*"
            ],
            "dhcp-socket-type": "udp",
            "outbound-interface": "use-routing",
            "re-detect": false
          },
          // Boolean parameter which controls DHCP server's behavior with respect
          // to creating host reservations for the same IP address. By default
          // this flag is set to true in which case the server prevents creation
          // of multiple host reservations for the same IP address. When this
          // parameter is set to false, the server allows for creating multiple
          // reservations for the same IP address within a subnet. This setting
          // is useful in deployments in which a given host may be communicating
          // with a DHCP server over multiple interfaces and depending on the
          // chosen interface different MAC address (or other identifier) will
          // be used to identify the host. Note that some host backends do not
          // support the mode in which multiple reservations for the same IP
          // address are used. If these backends are in use and this setting
          // is attempted a configuration error will occur. The MySQL and
          // PostgreSQL backends do support this mode.
          "ip-reservations-unique": true,

          "lease-database": {
            "type": "postgresql",
            "name": "{{ .DatabaseDatabase }}",
            "host": "psql.service.dc1.kjdev",
            "user": "{{ .Username }}",
            "port": 5432,
            "password": "{{ .Password }}",
            "reconnect-wait-time": 3000, // expressed in ms
            "max-reconnect-tries": 3,
            "on-fail": "stop-retry-exit",
            "connect-timeout": 3
          },
          "option-def": [
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "unifi-address",
              "code": 1,
              "space": "ubnt",
              "type": "ipv4-address"
            },
            /**
              * ONIE VIVSO
              */
            // TEST
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "installer_url",
              "code": 1,
              "space": "vendor-42623",
              "type": "string"
            },
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "updater_url",
              "code": 2,
              "space": "vendor-42623",
              "type": "string"
            },
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "machine",
              "code": 3,
              "space": "vendor-42623",
              "type": "string"
            },
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "arch",
              "code": 4,
              "space": "vendor-42623",
              "type": "string"
            },
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "machine_rev",
              "code": 5,
              "space": "vendor-42623",
              "type": "string"
            }
          ],
          // Global value for the rebind timer, i.e. the time after which the
          // DHCP client enters rebind state if it fails to renew the lease.
          "rebind-timer": 40,
          // Global value for the renew timer, i.e. the timer after which the
          // DHCP client renews the lease.
          "renew-timer": 30,
          // Global value to store extended information (e.g. relay agent
          // information) with each lease.
          "store-extended-info": true,
          // Statistics keep some samples per observation point.
          // There are two default values: maximum count and maximum age.
          // Set the maximum count to zero disables it.
          "statistic-default-sample-count": 0,
          // When the maximum count is 0 the maximum age (in seconds) applies.
          "statistic-default-sample-age": 60,
          // Multi-threading parameters.
          "multi-threading": {
            // By default Kea processes packets on a single thread (default
            // 'false' value for this option). To enable multi-threading, this
            // option can be set ('true' value).
            "enable-multi-threading": true,
            // When multi-threading is enabled, Kea will process packets on a
            // number of multiple threads configurable through this option. The
            // value must be a positive integer (0 means auto detect).
            "thread-pool-size": 8,
            // When multi-threading is enabled, Kea will read packets from the
            // interface and append a working item to the thread pool. This
            // option configures the maximum number of items that can be queued.
            // The value must be a positive integer (0 means unlimited).
            "packet-queue-size": 88
          },
          // Governs how the Kea DHCPv4 server should deal with the invalid
          // data received from the client.
          "sanity-checks": {
            // Specifies how the Kea DHCPv4 server should behave when invalid
            // data is read for a lease from the lease file. The following
            // values are supported "none" (don't attempt to correct the
            // lease information), "warn" (print a warning for subnet-id
            // related inconsistencies), "fix" (correct the subnet id by
            // trying to find the suitable subnet), "fix-del" (similar
            // to "fix" but delete the lease if no suitable subnet found),
            // "del" (delete the lease if the lease has invalid subnet
            // identifier value).
            "lease-checks": "warn"
          },
          // The shared networks definition starts here. shared-networks can
          // contain a list of shared networks. There are many parameters
          // that can be specified here, so this example may be overwhelming
          // at first, but the only mandatory parameter for each shared
          // network is name. It must be unique. Typically, each shared
          // network also needs to have at least two subnets to be functional,
          // but if you really want to, you can define a degraded shared
          // network that has 1 or even 0 subnets. This may come in handy
          // when migrating between regular subnets and shared networks
          // or when debugging a problem. It is not recommended to use
          // 1 subnet per shared network, as there is extra processing
          // overhead for shared networks.
          "shared-networks": [
            // spine0.site1.kristianjones.dev
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "spine0.site1.kristianjones.dev",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.0.1",
                  "172.16.0.2",
                  "172.16.0.126"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              // Specify if server should lookup global reservations.
              // "reservations-global": false,
              // // Specify if server should lookup in-subnet reservations.
              // "reservations-in-subnet": true,
              // // Specify if server can assume that all reserved addresses
              // // are out-of-pool.
              // // Ignored when reservations-in-subnet is false.
              // "reservations-out-of-pool": false,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 1,
                  "match-client-id": false,
                  "next-server": "0.0.0.0",
                  "server-hostname": "dhcp.service.dc1.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "10.1.1.53, 10.1.1.50"
                    },
                    {
                      "name": "routers",
                      "data": "172.16.0.1, 172.16.0.2"
                    },
                    {
                      "name": "domain-name",
                      "data": "office1.home1.kristianjones.dev"
                    },
                    {
                      "name": "ntp-servers",
                      "data": "162.159.200.123, 162.159.200.1"
                    },
                    {
                      "name": "tftp-server-name",
                      "data": "tftp.service.dc1.kjdev"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    }
                  ],
                  "pools": [
                    {
                      "pool": "172.16.0.100 - 172.16.0.120"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    // vmx1.fw1.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:62:1E",
                      "ip-address": "172.16.0.1"
                    },
                    // vmx1.fw2.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:93:38:96",
                      "ip-address": "172.16.0.2"
                    },
                    // ens192.node0.core0.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:2B:96",
                      "ip-address": "172.16.0.10"
                    },
                    // ens192.node1.core0.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:35:EE",
                      "ip-address": "172.16.0.11"
                    },
                    // ens192.node2.core0.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:AD:81",
                      "ip-address": "172.16.0.12"
                    },
                    // ens192.node3.core0.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:25:9C",
                      "ip-address": "172.16.0.13"
                    },
                    /**
                      * server-management.site1.kristianjones.dev
                      */
                    // vmx0.fw1.server-management.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:15:25",
                      "ip-address": "172.16.0.21"
                    },
                    // vmx0.fw2.server-management.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:93:19:5B",
                      "ip-address": "172.16.0.22"
                    },
                    /**
                      * test.core0.site1.kristianjones.dev
                      */
                    // test1.core0.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:C4:1C",
                      "client-classes": [
                        "vmhost-class1"
                      ]
                    },
                    // test2.core0.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:19:73",
                      "client-classes": [
                        "vmhost-class1"
                      ]
                    },
                    // test3.core0.site1.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:EA:05",
                      "client-classes": [
                        "vmhost-class1"
                      ]
                    },
                    /**
                      * sw1.core0.site1.kristianjones.dev
                      */
                    {
                      "hw-address": "00:24:98:EC:CF:C5",
                      "ip-address": "172.16.0.100"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.16.0.0/25",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            // server-management.site1.kristianjones.dev
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "server-management.site1.kristianjones.dev",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.0.21",
                  "172.16.0.22",
                  "172.16.20.1",
                  "172.16.20.2",
                  "172.16.20.254"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              // Specify if server should lookup global reservations.
              // "reservations-global": false,
              // // Specify if server should lookup in-subnet reservations.
              // "reservations-in-subnet": true,
              // // Specify if server can assume that all reserved addresses
              // // are out-of-pool.
              // // Ignored when reservations-in-subnet is false.
              // "reservations-out-of-pool": false,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 20,
                  "match-client-id": false,
                  "next-server": "0.0.0.0",
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "10.1.1.53, 10.1.1.50"
                    },
                    {
                      "name": "routers",
                      "data": "172.16.20.254, 172.16.20.1, 172.16.20.2"
                    },
                    {
                      "name": "domain-name",
                      "data": "server-management.site1.kristianjones.dev"
                    },
                    {
                      "name": "ntp-servers",
                      "data": "162.159.200.123,162.159.200.1"
                    },
                    {
                      "name": "tftp-server-name",
                      "data": "tftp.service.kjdev"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    }
                  ],
                  "pools": [
                    {
                      "pool": "172.16.20.200 - 172.16.20.230"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    // vmx1.fw1.server-management.kristianjones.dev
                    {
                      "hw-address": "00:50:56:BE:8E:62",
                      "ip-address": "172.16.20.1"
                    },
                    // vmx1.fw1.server-management.kristianjones.dev
                    {
                      "hw-address": "00:50:56:93:87:9A",
                      "ip-address": "172.16.20.2"
                    },
                    {
                      "hw-address": "00:50:56:BE:0F:1D",
                      "client-classes": [
                        "vmhost-class1"
                      ]
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.16.20.0/24",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            /**
              * home1.kristianjones.dev
              */
            // spine0.home1.kristianjones.dev
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "spine0.home1.kristianjones.dev",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.100.25",
                  "172.31.241.1",
                  "10.8.0.2"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              // Specify if server should lookup global reservations.
              // "reservations-global": false,
              // // Specify if server should lookup in-subnet reservations.
              // "reservations-in-subnet": true,
              // // Specify if server can assume that all reserved addresses
              // // are out-of-pool.
              // // Ignored when reservations-in-subnet is false.
              // "reservations-out-of-pool": false,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 100,
                  "match-client-id": false,
                  "next-server": "0.0.0.0",
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "10.1.1.50, 10.1.1.53"
                    },
                    {
                      "name": "routers",
                      "data": "172.16.100.25"
                    },
                    {
                      "name": "domain-name",
                      "data": "spine0.home1.kristianjones.dev"
                    },
                    {
                      "name": "ntp-servers",
                      "data": "162.159.200.123,162.159.200.1,10.1.1.123"
                    },
                    {
                      "name": "tftp-server-name",
                      "data": "tftp.service.kjdev"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    }
                  ],
                  "pools": [
                    {
                      "pool": "172.16.100.100 - 172.16.100.240"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    // Randoms
                    {
                      "hw-address": "3c:8d:20:3d:a1:9b",
                      "ip-address": "172.16.100.41"
                    },
                    {
                      "hw-address": "50:02:91:b2:1a:39",
                      "ip-address": "172.16.100.42"
                    },
                    {
                      "hw-address": "c4:4f:33:cf:56:62",
                      "ip-address": "172.16.100.43"
                    },
                    {
                      "hw-address": "5c:52:1e:66:42:47",
                      "ip-address": "172.16.100.44"
                    },
                    {
                      "hw-address": "88:54:1f:13:ef:be",
                      "ip-address": "172.16.100.45"
                    },
                    {
                      "hw-address": "d8:8c:79:26:2b:24",
                      "ip-address": "172.16.100.46"
                    },
                    {
                      "hw-address": "44:c6:5d:b0:5d:c6",
                      "ip-address": "172.16.100.47"
                    },
                    {
                      "hw-address": "2c:26:17:d7:cb:b5",
                      "ip-address": "172.16.100.48"
                    },
                    // Important
                    {
                      "hw-address": "3a:05:90:29:77:5d",
                      "ip-address": "172.16.100.251"
                    },
                    // TBD?
                    {
                      "hw-address": "d0:03:df:89:da:c2",
                      "ip-address": "172.16.100.95"
                    },
                    {
                      "hw-address": "00:04:4b:f0:c7:ec",
                      "ip-address": "172.16.100.92"
                    },
                    {
                      "hw-address": "f8:0f:f9:60:05:15",
                      "ip-address": "172.16.100.83"
                    },
                    {
                      "hw-address": "d8:6c:63:54:b1:0c",
                      "ip-address": "172.16.100.84"
                    },
                    {
                      "hw-address": "00:e0:4c:79:61:d1",
                      "ip-address": "172.16.100.85"
                    },
                    {
                      "hw-address": "44:07:0b:57:2d:76",
                      "ip-address": "172.16.100.86"
                    },
                    {
                      "hw-address": "2a:b1:76:70:33:d3",
                      "ip-address": "172.16.100.87"
                    },
                    // kjdev-workpc1.kristianjones.dev
                    {
                      "hw-address": "cc:48:3a:b6:e5:6b",
                      "ip-address": "172.16.100.252"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.16.100.0/24",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            // office1.home1.kristianjones.dev
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "office1.home1.kristianjones.dev",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.100.25",
                  "172.31.241.1",
                  ""
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              // Specify if server should lookup global reservations.
              // "reservations-global": false,
              // // Specify if server should lookup in-subnet reservations.
              // "reservations-in-subnet": true,
              // // Specify if server can assume that all reserved addresses
              // // are out-of-pool.
              // // Ignored when reservations-in-subnet is false.
              // "reservations-out-of-pool": false,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 31241,
                  "match-client-id": false,
                  "next-server": "0.0.0.0",
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "10.1.1.53, 10.1.1.50"
                    },
                    {
                      "name": "routers",
                      "data": "172.31.241.33"
                    },
                    {
                      "name": "domain-name",
                      "data": "office1.home1.kristianjones.dev"
                    },
                    {
                      "name": "ntp-servers",
                      "data": "162.159.200.123,162.159.200.1"
                    },
                    {
                      "name": "tftp-server-name",
                      "data": "tftp.service.kjdev"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    }
                  ],
                  "pools": [
                    {
                      "pool": "172.31.241.40 - 172.31.241.50"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    // eth1.pi1.home1.kristianjones.dev
                    {
                      "hw-address": "74:AC:B9:A4:F9:45",
                      "ip-address": "172.31.241.33"
                    },
                    // office-printer1.home1.kristianjones.dev
                    {
                      "hw-address": "e4:e7:49:b6:cb:50",
                      "ip-address": "172.31.241.34",
                      "user-context": {
                        "type": "printer",
                        "room": "office"
                      }
                    },
                    // philips-hue.office1.home1.kristianjones.dev
                    {
                      "hw-address": "EC:B5:FA:32:8F:7A",
                      "ip-address": "172.31.241.35",
                      "user-context": {
                        "type": "smarthome-bridge",
                        "room": "office"
                      }
                    },
                    // ap1.core1.home1.kristianjones.dev
                    {
                      "hw-address": "3c5cf117dac0",
                      "ip-address": "172.31.241.36",
                      "user-context": {
                        "type": "wifi-ap"
                      }
                    },
                    // TODO: Tinkerbell Server Lab
                    {
                      "hw-address": "B8:AE:ED:79:5E:1D",
                      "client-classes": [
                        "vmhost-class1"
                      ]
                    },
                    // sw1.office1.home1.kristianjones.dev
                    {
                      "hw-address": "2C:60:0C:94:97:3C",
                      "ip-address": "172.31.241.39"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.31.241.32/27",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "pi1home1",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.100.25"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              // Specify if server should lookup global reservations.
              // "reservations-global": false,
              // // Specify if server should lookup in-subnet reservations.
              // "reservations-in-subnet": true,
              // // Specify if server can assume that all reserved addresses
              // // are out-of-pool.
              // // Ignored when reservations-in-subnet is false.
              // "reservations-out-of-pool": false,
              // "reservation-mode": "all",
              // It is replaced by the "reservations-global",
              // "reservations-in-subnet" and "reservations-out-of-pool"
              // parameters.
              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 3241,
                  "match-client-id": false,
                  "next-server": "0.0.0.0",
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "172.31.241.1, 172.16.100.25, 172.16.0.10, 172.16.0.11, 172.16.0.12, 172.16.0.13, 172.16.0.1, 172.16.0.2"
                    },
                    {
                      "name": "routers",
                      "data": "172.31.241.1"
                    },
                    {
                      "name": "domain-name",
                      "data": "spine0.home1.kristianjones.dev"
                    },
                    {
                      "name": "ntp-servers",
                      "data": "162.159.200.123,162.159.200.1"
                    },
                    {
                      "name": "tftp-server-name",
                      "data": "tftp.service.kjdev"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    }
                  ],
                  "pools": [],
                  "rebind-timer": 10800,
                  "reservations": [
                    // eth5.wan-sw1.home1.kristianjones.dev
                    {
                      "hw-address": "2c:c8:1b:54:61:82",
                      "ip-address": "172.31.241.1"
                    },
                    // eth1.pi1.home1.kristianjones.dev
                    {
                      "hw-address": "dc:a6:32:2e:bd:79",
                      "ip-address": "172.31.241.2"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.31.241.0/30",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            }
          ], // end of shared-networks
          "server-hostname": "core0.site1.kristianjones.dev",
          // List of IPv4 subnets which don't belong to any shared network.
          "subnet4": [],
          // Global valid (default) lifetime value.
          "valid-lifetime": 1800,
          // Global min valid lifetime value.
          "min-valid-lifetime": 900,
          // Global max valid lifetime value.
          "max-valid-lifetime": 43200,
          // Reservations (examples are in other files).
          "reservations": [],
          // Server tag.
          "server-tag": "Kea-POD",
          // DHCP queue control parameters.
          "dhcp-queue-control": {
            // Enable queue is mandatory.
            "enable-queue": true,
            // Queue type was mandatory.
            "queue-type": "kea-ring4",
            // Capacity is optional.
            "capacity": 64
          },
          // The following configures logging. It assumes that messages with at
          // least informational level (info, warn, error and fatal) should be
          // logged to stdout.
          "loggers": [
            {
              "name": "kea-dhcp4",
              "output_options": [
                {
                  "output": "stdout"
                }
              ],
              "severity": "DEBUG",
              "debuglevel": 99
            }
          ]
        } // end of Dhcp4
      }

    `}}
